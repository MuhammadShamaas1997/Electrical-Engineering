#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

#include <meep.hpp>
using namespace meep;
using std::complex;

double eps(const vec & c) { if(c.r()>=5){return 2.0;}else return 1.0; }

int main(int argc, char **argv) {
  initialize mpi(argc, argv);
  quiet = true;
  const char *mydirname = "MMTL-out";
  trash_output_directory(mydirname);
  master_printf("Testing cylindrical coords under different splittings...\n");


  double a = 10.0;
  double ttot = 30.0;
  int splitting=2;
  grid_volume gv = volcyl(8, 8, a);
  gv.center_origin();
  structure s(gv, eps, no_pml(), identity(), splitting, 0.4);
  s.set_output_directory(mydirname);
  for (int m = 0; m < 1; m++) {
    char m_str[10];
    snprintf(m_str, 10, "%d", m);
    master_printf("Trying with m = %d and a splitting into %d chunks...\n", m, splitting);
    fields f(&s, m);
    f.use_bloch(0.0);
//    f.add_point_source(Ep, 0.7, 2.5, 0.0, 4.0, veccyl(4, 4), 1.0);
    f.add_point_source(Hr, 0.8, 0.6, 0.0, 1.0, veccyl(4, 0), 1.0,1);
/*    f.add_point_source(Ez, 0.8, 0.6, 0.0, 4.0, veccyl(4, 0.1), 1.0,1);
    f.add_point_source(Ez, 0.8, 0.6, 0.0, 4.0, veccyl(4, 0.2), 1.0,1);
    f.add_point_source(Ez, 0.8, 0.6, 0.0, 4.0, veccyl(4, 0.3), 1.0,1);
    f.add_point_source(Ez, 0.8, 0.6, 0.0, 4.0, veccyl(4, 0.4), 1.0,1);
    f.add_point_source(Ez, 0.8, 0.6, 0.0, 4.0, veccyl(4, 0.5), 1.0,1);*/
//    f.add_point_source(Er, 0.8, 0.6, 0.0, 4.0, veccyl(4, 4), 1.0);
    
//while (f.time() < ttot) {
    f.step();
    h5file * fileEz1=f.open_h5file("MMTLEz1",h5file::WRITE,0,false);
    f.output_hdf5(Hr,f.v,fileEz1);
    for (int i=0;i<30;i++){f.step();}
    h5file * fileEz2=f.open_h5file("MMTLEz2",h5file::WRITE,0,false);
    f.output_hdf5(Hr,f.v,fileEz2);
    for (int i=0;i<30;i++){f.step();}
    h5file * fileEz3=f.open_h5file("MMTLEz3",h5file::WRITE,0,false);
    f.output_hdf5(Hr,f.v,fileEz3);
    for (int i=0;i<30;i++){f.step();}
    h5file * fileEz4=f.open_h5file("MMTLEz4",h5file::WRITE,0,false);
    f.output_hdf5(Hr,f.v,fileEz4);
    for (int i=0;i<30;i++){f.step();}
    h5file * fileEz5=f.open_h5file("MMTLEz5",h5file::WRITE,0,false);
    h5file * fileEz7=f.open_h5file("MMTLEz7",h5file::WRITE,0,false);

//    }
/*    h5file * fileEz=f.open_h5file("MMTLEz",h5file::WRITE,0,false);
    f.output_hdf5(Ez,f.v,fileEz);
    h5file * fileEp=f.open_h5file("MMTLEp",h5file::WRITE,0,false);
    f.output_hdf5(Ep,f.v,fileEp);
    h5file * fileEr=f.open_h5file("MMTLEr",h5file::WRITE,0,false);
    f.output_hdf5(Er,f.v,fileEr);*/
  }

  return 0;
}