

var VERSION="3.58smt2";



















var ajGetTaptakey;




jQuery.expr[':'].regex = function(elem, index, match) {
    var matchParams = match[3].split(','),
        validLabels = /^(data|css):/,
        attr = {
            method: matchParams[0].match(validLabels) ? 
                        matchParams[0].split(':')[0] : 'attr',
            property: matchParams.shift().replace(validLabels,'')
        },
        regexFlags = 'ig',
        regex = new RegExp(matchParams.join('').replace(/^s+|s+$/g,''), regexFlags);
    return regex.test(jQuery(elem)[attr.method](attr.property));
};




(function(f) {
    function r() {
        var b, c, a = {
            height: l.innerHeight,
            width: l.innerWidth
        };
        return a.height || (b = m.compatMode, (b || !f.support.boxModel) && (c = "CSS1Compat" === b ? g : m.body, a = {
            height: c.clientHeight,
            width: c.clientWidth
        })), a
    }

    function p() {
        if (d.length) {
            var b = 0,
                c = f.map(d, function(a) {
                    var b = a.data.selector;
                    a = a.$element;
                    return b ? a.find(b) : a
                });
            h = h || r();
            for (e = e || {
                    top: l.pageYOffset || g.scrollTop || m.body.scrollTop,
                    left: l.pageXOffset || g.scrollLeft || m.body.scrollLeft
                }; b < d.length; b++)
                if (f.contains(g, c[b][0])) {
                    var a = f(c[b]),
                        k = a[0].offsetHeight,
                        p = a[0].offsetWidth,
                        n = a.offset(),
                        q = a.data("inview");
                    if (!e || !h) break;
                    n.top + k > e.top && n.top < e.top + h.height && n.left + p > e.left && n.left < e.left + h.width ? q || a.data("inview", !0).trigger("inview", [!0]) : q && a.data("inview", !1).trigger("inview", [!1])

                }
        }
    }
    var h, e, k, d = [],
        m = document,
        l = window,
        g = m.documentElement;
    f.event.special.inview = {
        add: function(b) {
            d.push({
                data: b,
                $element: f(this),
                element: this
            });
            !k && d.length && (k = setInterval(p, 250))
        },
        remove: function(b) {
            for (var c = 0; c < d.length; c++) {
                var a = d[c];
                if (a.element ===
                    this && a.data.guid === b.guid) {
                    d.splice(c, 1);
                    break
                }
            }
            d.length || (clearInterval(k), k = null)
        }
    };
    
    
    
    $(document).on("scroll resize scrollstop", function() {
        h = e = null;
    });
    !g.addEventListener && g.attachEvent && g.attachEvent("onfocusin", function() {
        e = null
    })
})(jQuery);



        




(function($, undefined){
    $.extend({
	"lockfixed": function(el, config){
	    if (config && config.offset) {
		config.offset.bottom = parseInt(config.offset.bottom,10);
		config.offset.top = parseInt(config.offset.top,10);
	    }else{
		config.offset = {bottom: 100, top: 0};	
	    }
	    var el = $(el);
	    if(el && el.offset()){
		var el_position = el.css("position"),
		el_margin_top = parseInt(el.css("marginTop"),10),
		el_position_top = el.css("top"),
		el_top = el.offset().top,
		pos_not_fixed = false;
		    
		 
		 
		
		if (config.forcemargin === true || navigator.userAgent.match(/\bMSIE (4|5|6)\./) || navigator.userAgent.match(/\bOS ([0-9])_/) || navigator.userAgent.match(/\bAndroid ([0-9])\./i)){
		    pos_not_fixed = true;
		}
		$(window).bind('DOMContentLoaded load scroll resize orientationchange lockfixed:pageupdate',el,function(e){
		    
		    if(pos_not_fixed && document.activeElement && document.activeElement.nodeName === "INPUT"){
			return;	
		    }
		    var top = 0,
		    el_height = el.outerHeight(),
		    el_width = el.outerWidth(),
		    max_height = $(document).height() - config.offset.bottom,
		    scroll_top = $(window).scrollTop();
		    
		    if (el.css("position") !== "fixed" && !pos_not_fixed) {
			el_top = el.offset().top;
			el_position_top = el.css("top");
		    }
		    if (scroll_top >= (el_top-(el_margin_top ? el_margin_top : 0)-config.offset.top)){
			if(max_height < (scroll_top + el_height + el_margin_top + config.offset.top)){
			    top = (scroll_top + el_height + el_margin_top + config.offset.top) - max_height;
			}else{
			    top = 0;	
			}
			if (pos_not_fixed){
			    el.css({'marginTop': (parseInt(scroll_top - el_top - top,10) + (2 * config.offset.top))+'px'});
			}else{

			    el.css({'position': 'fixed','top':(config.offset.top-top)+'px','width':"300px",'right':"30px"});
			}
		    }else{
			el.css({'position': el_position,'top': el_position_top, 'width':"300px", 'marginTop': (el_margin_top && !pos_not_fixed ? el_margin_top : 0)+"px"});
		    }
		});	
}
}
    });
})(jQuery);




(function ($) {
    $.fn.progressbar = function (options) {
        var settings = $.extend({
	   
        width:'300px',
        height:'25px',
        color:'#0ba1b5',
        padding:'2px',
        border: '3px solid rgb(154, 175, 229)'},options);
 
        
        $(this).css({
            'width':settings.width,
            'border':settings.border,
            'border-radius':'5px',
            'overflow':'hidden',

            'display':'fixed',
	    'position':'fixed',
	    'top':'30px',
	    'right':'30px',
	    'z-index': 9999999,
            'padding': settings.padding,
            'margin':'0px 10px 5px 5px',
	    'background-color':'white', 
	    'text-align': 'left'
            });

 
        
        var progressbar =$("<div><span id='taptaTooltipHead' class='notranslate' style='text-align:center'>"+taptav.imgIcon+taptav.taptaTitle+" progress</span></div>");
        progressbar.css({
	'position': 'relative',
        'height': '25px',
	    'z-index': 9999999,
        'text-align': 'right',
        'vertical-align':'middle',
        'color': '#fff',
        'width': '0px',
        'border-radius': '3px',
        'background-color': '#0ba1b5'
        });
 
        $(this).append(progressbar);
 
        this.progress = function(value) {
            var width = $(this).width() * value/100;
            progressbar.width(width).html(Math.round(value)+"% ");
        }
        return this;
    };
 
}(jQuery));


var MD5 = function (string) {
	  
    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }
  
    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }
  
    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }
  
    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
  
    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
  
    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
  
    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
  
    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };
  
    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };
  
    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
  
        for (var n = 0; n < string.length; n++) {
  
            var c = string.charCodeAt(n);
  
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
  
        }
  
        return utftext;
    };
    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;
    string = Utf8Encode(string);
    x = ConvertToWordArray(string);
    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;
    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }
    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d); 
    return temp.toLowerCase();
}	
	

function fromOutsideBMP(cp) {
	
	  var x=cp-0x10000;
	  var top10=parseInt("11111111110000000000",2);
	  var end10=parseInt("1111111111",2);
	  var part1=(x&top10)/1024+0xD800;
	  var part2=(x&end10)+0xDC00;
	  var s=String.fromCharCode(part1)+String.fromCharCode(part2);
	  return s;
	}



var Cbegin = fromOutsideBMP(0x1F000); 
var Cend = fromOutsideBMP(0x1F010); 
var Cstop = fromOutsideBMP(0x1F011); 
var Ccannot = fromOutsideBMP(0x1F012); 

var Ctrld = '\u200B'; 

var Ccaptcha = fromOutsideBMP(0x1F003); 


/*function translate(parent_class, langpair, context, taptaUrl) {
    taptaTranslate(parent_class, langpair, context, taptaUrl);
}*/
var translate = taptaTranslate,
	wipoTranslate = taptaTranslate

	/*
function wipoTranslate(parent_class, langpair, context, taptaUrl) {
    taptaTranslate(parent_class, langpair, context, taptaUrl);
}
*/

function yandexTranslate (parent_class, langpair, context, taptaUrl) {
    taptav.yandexKey='trnsl.1.1.20150108T101616Z.c025914e9af9e8c9.55a318ea01bf3de0b95fabe635721b4f42dc4833';
    taptav.type='yandex';
    taptav.MaxTranslations=3;
    taptav.taptaTitle="Yandex Translate"; 

    taptav.imgIcon=taptav.yandexImgIcon;
    taptav.myTaptaUrl='https://translate.yandex.net/api/v1.5/tr.json/translate';
    taptav.transURL = "/api/v1.5/tr.json/translate";
    taptaTranslate(parent_class, langpair, context, taptaUrl);
}

function baiduTranslate (parent_class, langpair, context, taptaUrl) {
    taptav.type='baidu'; 
    taptav.taptaTitle="Baidu Translate"; 
    
    taptav.baiduSecret = '5lgMv6CLqaGBGXPZGyrR5mkpF4upeRtd';
    taptav.baiduAppid = '4489341';
    
    taptav.baiduKey="a16gNhVTX9thkHnQAyeO2MhC";

    taptav.imgIcon=taptav.baiduImgIcon;
    
    taptav.myTaptaUrl='http://api.fanyi.baidu.com/api/trans/vip/translate';
    taptav.xhrFields = {withCredentials: true},

    taptav.transURL = "/api/trans/vip/translate";
    taptaTranslate(parent_class, langpair, context, taptaUrl);
}

function taptaTranslate(parent_class, langpair, context, taptaUrl, hideProgressBar) {
	
	if (taptav.hideProgressBar === undefined) {
		if (hideProgressBar === undefined) {
			taptav.hideProgressBar = false;
		} else {
			taptav.hideProgressBar = hideProgressBar;
		}
	}



	taptav.$parentClass = $( taptav.myParent_class );
	taptav.alreadyClicked=1;
	taptav.errorDisplayed=false;
	if (context == null) {context="";}
	if (context.length > 30) {
		context=context.substring(0,27)+"...";
	}
	context=context.replace(/[{}\"\n\r]/g,"_");

	$('.ctapta').remove(); 
	taptav.hideTaptaMenu();




	if (context != null && context.length > 1) {
		
		var lastChar=context.substring(context.length-1);
		if (lastChar == 'd') {
			taptav.myDomain='ZDES';
		} 
		if (lastChar == 'c') {
			taptav.myDomain='ZCLA';
		} 
	}
	
noconsole.log("domain="+taptav.myDomain+" should translate the children of [" + parent_class	+ "] lp="+langpair+" key=" + taptav.myTaptaKey);
	if (langpair.substring(0,2) == langpair.substring(2)) { 
		
		return true;
	}
	if (langpair.substring(0,2) == 'zh' || langpair.substring(0,1) == 'j') {
		taptav.maxLengthTxt = 251;
	}

	if (taptav.myParent_class=="body") {
		taptav.myParent_class= parent_class;		
		taptav.$parentClass = $( taptav.myParent_class );
	}
	if (langpair=="enja") {
		taptav.myLangpair="enjp";

	} else {
		taptav.myLangpair=langpair || taptav.myLangpair;
	}
	if (taptav.type == "baidu") {  
		if (langpair=="jaen") {
			taptav.myLangpair="jpen";
		}
		if (langpair=="jazh") {
			taptav.myLangpair="jpzh";
		}
		if (langpair=="enja") {
			taptav.myLangpair="enjp";
		}
		if (langpair=="zhja") {
			taptav.myLangpair="zhjp";
		}
	}
    taptav.myTaptaUrl=taptaUrl||taptav.myTaptaUrl;
	taptav.myContext=context;
	
	launchTaptaProgressBar();
	
	
	
	
	var ctapta = taptav.$parentClass.find("a.ctapta");
	ctapta.each(emptyHtml);

	$('#taptaTooltipPlus').html("..."); 

	
	
	taptav.$parentClass.contents()
	.filter( isTextNode )
	.filter( containsStop )
	.each(function() {
		var old = $(this);
		$(this).nodeValue.replace(Cstop,"");
	});


	
	if (taptav.myTaptaKey == "none" || taptav.myTaptaKey == "error") { 
		
		taptav.myTaptaKey="checking";

		getTaptaKey(1);
	} else if ( taptav.myTaptaKey!="checking") {
		
		translateAfterKey(); 
	}

	
	return true;
}

var totalLength=0;
var myLength=0;  
var translatedLength=0;  

function translateAfterKey() { 
    taptav.countTranslated=0;
    taptav.countElement=0;
    taptav.countRequestSubmitted = 0;
    taptav.countRequestTranslated = 0;
    taptav.countRequestInError=0;
    taptav.stop=false;
    linkToCaptchaDisplayed=false;
    captchaAlreadyRequested=false;

    
    (function($){
	$.wrapAll2 = function(sel, wrapSel) {
	    var wrap = $(wrapSel);
	    $(sel).each(function() {
		    var more = $(this).next(sel).length;
		    $(this).replaceWith(wrap).appendTo(wrap);
		    if (!more) wrap = $(wrapSel);
		});
	};
    })(jQuery);

    
    
    if (taptav.countSpanToTranslate + taptav.countSpanTranslated == 0) {  
	taptaPrepareDoc();
	if (taptav.options.onlyprepare) {return;}

    }

    
    
    
	var $toWrap = taptav
		.$parentClass
		.not('.notranslate,.taptat')
		
	$toWrap.push($("#de_desc"))
	
	$toWrap.each( function(index, $elem) {

			$($elem)
				.contents()
				.filter(function(){
					return this.nodeType !== 1;
				})
				.wrap( "<span class=\"utext\" bp=\"1\" ></span>" );
		})
	    

	taptav.$parentClass.find('div,li,span,p').not('.taptat,.notranslate,.taptaToTranslate').contents()
            .filter(function(){
                if (this.nodeType == 3 && textOkToTranslate) {
					return true;
				} else {
					return false;
				}
            })
            .wrap( "<span class=\"utext\" bp=\"2\"></span>" );


	try {
	    $.wrapAll2("span.utext[bp='2']",'<span class="utext" bp=\"3\"/>');
	} catch (e) {
	   noconsole.log("some problems with wrapp2??");
	}

	    
	var chg=0;

	$('span.utext > span.utext').each(function() {
	    $(this).replaceWith(this.childNodes);
	    chg++;
	});
	myLength=0;

    if (taptav.countSpanToTranslate + taptav.countSpanTranslated == 0) {  
    	chg=0;
	$( "div").contents().filter(function(){
	    return this.nodeType === 3 
		&& this.nextSibling != null   
		&& this.nextSibling.nodeType === 1  
		&& this.nodeValue.replace(/[ \n]+/g, "").length > 2; 
            })
            .wrap( "<span></span>" );
    
	$( "div").contents().filter(function(){
	    return this.nodeType === 3 
		&& this.nextSibling != null   
		&& this.nextSibling.nodeType === 1  
		&& this.nodeValue.replace(/[ \n]+/g, "").length > 2; 
            })
            .wrap( "<span></span>" );
	taptav.$parentClass
  	    .find("*")
	    .contents()
  	    .filter( containsNonSpanText )
       	    .replaceWith(function (index) {
		var val= this;
		if (val.childNodes !== null && val.childNodes !== undefined && val.childNodes.length >= 1) {
		    
		    var replacement="";
		    var afterAll="";
		    if ((typeof this.outerHTML) == 'string' && this.outerHTML.indexOf('<')>=0) {

			var h=this.outerHTML;
			var i=h.indexOf('<');
			var replacement=h.substring(i,h.indexOf('>', i)+1);
			afterAll=  h.substring(h.lastIndexOf('<'));
		    }
		    var attLang="";
		    if (val.getAttribute('lang')) { 
 			  attLang=' lang="'+val.getAttribute('lang')+'"';
			  if (val.getAttribute('context')) { 
			      attLang=attLang+' context="'+val.getAttribute('context')+'"';
			  }
		    }
		    for (var j = 0; j < val.childNodes.length; ++j) {
			child=val.childNodes[j];
			if (child.nodeType===3) {
			    var stringToTranslate=child.nodeValue;
			    var l=stringToTranslate.length;
			    var currentStart=0;
			    var i=0;
			    while (l > 0) {
				if (l > 3) { 
				    var i1=stringToTranslate.replace(/\&nbsp\;/gi," ").replace(/[\n\t ][\n\t ]*/g," ").replace(/^ /g,"").replace(/ $/g,"");
	    
				    var l1=i1.length;
				    myLength+=l1;
				    
				    if (l1 > taptav.maxLengthTxt) {
					var bestSplitPoint=findBestSplitPoint(stringToTranslate,taptav.maxLengthTxt);
					l=bestSplitPoint;
					stringToTranslate=stringToTranslate.substring(0,l);
					
				    }
				}
				
				var sstring=stringToTranslate
				    .replace(/\&nbsp;/gi,"") 
				
				    .replace(/[A-Z]{1,3}\/([A-Z][A-Z])?[0-9]+(\/[0-9]+)?/,"")
				    .replace(/[ \t\n0-9,;:\.\[\]\/\【０-９\】]/gm,"");
				if (sstring.length < 2 || sstring == "Fig") {

				    
				    replacement += "<span class=\"notranslate\" bp=2 >"+stringToTranslate+"</span>";
				} else {
				    replacement += "<span class=\"taptaToTranslate\""+attLang+" BP=\"b"+i+"\" l=\""+l+"\" id=\"ttt"+taptav.taptaToTranslateId+"\">"+stringToTranslate+"</span>";taptav.taptaToTranslateId++;

				}
				stringToTranslate=child.nodeValue.substring(currentStart+l);
				currentStart+=l;
				l=stringToTranslate.length;
				i++;
			    }
			} else {
			    var ts=(typeof child.toString);
			    if ((typeof child.outerHTML) == 'string') {	

				if (child.outerHTML.indexOf("<script") > -1) {
				    replacement += ' ';
				} else {
				    
				    
				    replacement += 
				    child.outerHTML.replace(
					    /<span[^>]*>([^<>]+)<\/span>/g
					,"<span class=\"taptaToTranslate\""+attLang+" id=\"ttt"+taptav.taptaToTranslateId+"\">$1</span>");
				    taptav.taptaToTranslateId++;
				}

			    } else if ((typeof child.innerHTML) == 'string') {	

				replacement += child.innerHTML;
			    } else {
				replacement += child;
			    }
			    
			}
		    }
		    var n=replacement.replace(/<script[^<>]+>[^<>]*<\/script>/gi," ");
		    
		    var n=n.replace(
			    /(<span class=\"taptaToTranslate\"[^>]*>)([^<>]+)<\/span>( *)<span class=\"(taptaToTranslate|notranslate)\"[^>]*>/g,"$1$2$3");
		    while (n != replacement) { 
			replacement=n;
			n=n.replace(
/(<span class=\"taptaToTranslate\"[^>]*>)([^<>]+)<\/span>( *)<span class=\"(taptaToTranslate|notranslate)\"[^>]*>/g,"$1$2$3");
		    }

		    



		    return n+afterAll;
		}
		return this;		
	    });
    }
    

    taptav.myNodes=taptav.$parentClass.contents();
   noconsole.log('.taptaToTranslate,myparent='+taptav.myParent_class);

    $('.taptaToTranslate').filter( textTooLong )
      	    .replaceWith(insertTaptaToTranslateTags);

    if (taptav.options.debug) {return;}

    
    
    taptav.$parentClass.find('span,p,b,div').not(":has(*)")
	.not('.taptat,.notranslate,.taptaToTranslate')
  	    .filter( textTooLong )
      	    .replaceWith(insertTaptaToTranslateTags);

    taptav.$parentClass.find('span,p,div,h2,h3,h4,h5,h6').not(":has(*)").not('.taptat,.notranslate,.taptaToTranslate')
  	    .filter( textOkToTranslate )
       	    .replaceWith(insertTaptaToTranslateTags);

    $('.taptaToTranslate:not(lang)').each(
	    function (){

		$(this).attr('lang',$(this).closest("[lang]").attr('lang'));
		$(this).attr('context',$(this).closest("[context]").attr('context'));
		       }
	);

    	$('.taptaToTranslate:empty').each(
	    function (){

		$(this).html = '[empty]';
		$(this).removeClass('taptaToTranslate');
	    }
	);
    
    
    $('.rf-tt-loading>.taptaToTranslate').each(

        function (){$(this).removeClass('taptaToTranslate');}
    );

    


	var countD=0; var countD1=0;
	
	
	$('span.taptaToTranslate')
		.filter(function(index){
		    var t=""+$(this).text();
		    if (t==null) {return false;}
		    if (countD1++ < 3) {
		noconsole.log("before t=''"+t+"'' m0="+t.match(/[0-9]/)+" nbsp="+(t.indexOf("nbsp") >=0)+" sp="+(t.match(/^[  \n\r\t]/m))+" n="+t.indexOf("\n")+" space="+t.indexOf(" "));
		    }
		    var v=t.match(/[0-9]/m);
		    if (v) {return true;}
		    if (t.indexOf("nbsp") >=0) {
			return true;
		    }
		    if (t.indexOf("\n") >=0) {
			return true;
		    }
		    if (t.indexOf(" ") ==0) {
			return true;
		    }
		    if (t.match(/^[  \n\r\t]/m)) {
			return true;
		    }
		    return false;
		})
		.replaceWith(function (){
		    var t=$(this)[0].outerHTML;

		    var r=t.replace(/(<span class=\"?taptaToTranslate[^>]*>)((\&nbsp\;|[  \t\r\n]|[0-9]|\[[0-9]+\])+) *([\.\,、\t\r\n]?)([^<>]*)<\/span>/gm,"$2$4 $1$5</span>")
		    if (countD++ < 3) {
		noconsole.log("t="+t+"\nr="+r);
		    }
		    
		    return r.replace(/<span class=\"?taptaToTranslate[^>]*><\/span>/gm,"");
		    ;
		});



	
	taptav.countSpanToTranslate = $('.taptaToTranslate').length;


	$('.taptaToTranslate').css("color","darkblue");



    taptav.myNodes=taptav.$parentClass.contents();
    var currentTranslatedCount=taptav.countTranslated;

if (taptav.options["notranslate"]) {return;}

    
    
    $('.taptaToTranslate').each(function () {	
	if (taptav.stop) return;

	if (taptav.countTranslated +taptav.countRequestInError <= taptav.MaxTranslations-1) {
	    translateOneTxtElement($(this).html(), $(this).text(),this, $(this).attr('lang'),$(this).attr('context'));
	}
/*	if (taptav.countTranslated + taptav.countRequestInError== taptav.MaxTranslations) {
	    taptav.ataptaAnchor++;
	    var stopstring="<a name=\"atapta"+taptav.ataptaAnchor+"\"/><a name=\"ctapta\" class=\"ctapta\" href=\"#atapta"+taptav.ataptaAnchor+"\" onclick=\""+taptav.type+"Translate('"+taptav.myParent_class+"','"+taptav.myLangpair+"')\">";
	    var estopstring=stopstring+"&lt;"+taptav.imgIcon+taptav.lbContinueTranslate+"</a>";
	    stopstring=stopstring+taptav.imgIcon+"&gt;<br class=3/></a>";
	    
	    $(this).html(stopstring+$(this).html()+estopstring);
	    $('.ctapta').css( taptav.taptaButtonStyles );
	    taptav.stop=true;

	}
*/
    });
   noconsole.log("sttas: currentTranslatedCount="+currentTranslatedCount+" == taptav.countTranslated="+taptav.countTranslated);
    if (currentTranslatedCount == taptav.countTranslated) {
noconsole.log("ok");
	if (currentTranslatedCount == 0) {
	    $('#taptaAdds').html("<i>Nothing to translate</i>");
	} else {
	    taptav.taptaProgressBar.progress(100);
	    $('#taptaAdds').html("<i>Everything translated</i>");
	} 
	if ($(".taptaToTranslate:contains('"+Ccannot+"')").length > 0) {
	    postProcessTranslations();
	}
	else {
	   noconsole.log("Nothing left to be translated!");
	}
    }
}



function taptaPrepareDoc (hideProgressBar) {
	
	if (taptav.hideProgressBar === undefined) {
		if (hideProgressBar === undefined) {
			taptav.hideProgressBar = false;
		} else {
			taptav.hideProgressBar = hideProgressBar;
		}
	}
	
	taptav.$parentClass.find('#taptaTooltipPlus').html("..."); 

	taptav.$parentClass.find('#taptaAdds').html("<div id=\"taptaAdds\"><i>Translating</i> "+taptav.imgWaitIcon+"</div>");
	if (taptav.context == null ) {taptav.context = "";}
    
    if (taptav.context == 'resultlist' || (taptav.context.indexOf("rl:") == 0)) { 
	
    	taptav.$parentClass.find(".trans-section")
    	.attr('context',
    		function(n, v){
    		  try {
    			id=$(this).closest('td').attr('id');	

    			i=id.indexOf(':');
    			i=id.indexOf(':',i+1);

    			prefix=id.substring(0,i);

    			yearselector='#'+prefix+':resultListTableColumnPubDate'; yearselector=yearselector.replace(/:/g,"\\:");
    			ipcselector='#'+prefix+':resultListTableColumnIPC'; ipcselector=ipcselector.replace(/:/g,"\\:");

    			
    			
    			
    			
    			try {
    				year=$( yearselector ).text();year=year.substring(year.length-4);
    			} catch(err1) {year="UNK";}

    			ipc=$(ipcselector).find('span:first').text();
    			ipc=ipc.replace(/ /g,"").substring(0,4);


    			return "IPC:"+ipc;	
    		  } catch (err) {
    		noconsole.log("err:"+err);
    			return "";
    		  }
    	});
     }
    
    
    taptav.$parentClass.find(".NPtitle, .NPabstract")
    .attr('context',
    		function(n, v){
    	      
    	      try {
    	    	  try {ipc=$( '#detailMainForm\\:NPipc' ).text().replace(/ /g,"").substring(0,4);} catch (e) {ipc="";}
    	    	  try {
    	    		  pubdate=$( '#detailMainForm\\:NPpubdate' ).text();
    	    		  year=pubdate.substring(pubdate.length-4);
    	    	  } catch (e) {year=" date="+pubdate;}
    	    	  return "IPC:"+ipc;	
    	      } catch(e) {return "UNK";}
           })
    .attr('context',
    		function(n, v){
    	
              try {
            	  try {ipc=$( '#PCTipc' ).text().replace(/ /g,"").substring(0,4);} catch (e) {ipc="";}
            	  try {		
            		  pubdate=$( '#detailPCTtablePubDate' ).text();
            		  year=pubdate.substring(pubdate.length-4);
            	  } catch (e) {year=" date="+pubdate;}
            	  return "IPC:"+ipc;	
              } catch(e) {return "UNK";}
    })
	
	
	


    

 
  

    
    if ($('#detailMainForm\\:PCTDESCRIPTION_content').length > 0) {
    	taptav.$parentClass = $('#detailMainForm\\:PCTDESCRIPTION_content');
    }
    
	taptav.$parentClass.find('font[face] > script').remove();
    
    
    taptav.$parentClass
    	.find('b,i,u,a[href^="#"],span[style],span.term-highlight')
    	.not('.taptat,.notranslate')
    	.each(function() {
    		$(this).replaceWith(this.childNodes);
    	});
    
    
    taptav.$parentClass
    	.find('abstract').not('.taptat,.notranslate')
    	.each(function() {
    		$(this).replaceWith(this.childNodes);
    	});

    
    taptav.$parentClass
    .contents()
    .find( "font[face],copy" )
      .replaceWith(
        function (index) {
         return $(this).text();
        });


if (taptav.options.transliteration) {



try { 


    var $nodes;
    
	
    $('.NPabstract > p').each(function() {
        $(this).replaceWith(this.childNodes);
    });
    
    if (taptav.context.indexOf("bi:JP") == 0) {
	$nodes = $('#detailMainForm\\:NPapplicants:regex("[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]")');
	$nodes.add($('#detailMainForm\\:NPinventors:regex("[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]")'));
	$nodes=$('#detailMainForm\\:NPinventors:regex("[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]"), #detailMainForm\\:NPapplicants:regex("[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]")');
	$nodes=$('#detailMainForm\\:NPinventors, #detailMainForm\\:NPapplicants,#detailMainForm\\:NPagents').filter(':regex("[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]")');
   


	

 
  
   

    




      $nodes.replaceWith(function (index) {
	  var h=$(this).html();









	  var a=h.split(/<br\/?>/i);
	  var html="";
	  for (var i=0; i < a.length; i++){
	      if (i>0) {html+="<br/>";}
	      if (a[i].length>0) {
		 noconsole.log('h='+a[i]+" matches="+a[i].match(/[\u3040-\u309f\u30a0-\u30ff\u4e00-\u9faf\u3400-\u4dbf]/));
		  
		  if (a[i].match(/[\u3040-\u309f\u30a0-\u30ff\u4e00-\u9faf\u3400-\u4dbf]/)) {
		      var s="<span class=\"taptaToTranslate\" lang=\"jp-TR\" id=\"ttt"+taptav.taptaToTranslateId+"\">"+a[i]+"</span>";
		      s=s.replace(/( *\([a-zA-Z0-9]+\))<\/span>/,"</span>$1"); 
		      s=s.replace(/[▲▼]/g,"");
		  } else {
			  s=a[i];
		  }
		  html += s;
	      }
	      taptav.taptaToTranslateId++;
	  }
	 noconsole.log('New name:'+html+" context:"+taptav.context); 
          return html;

        });
    }
  } catch (err) { 
  	
  }
}
    
 




   $("div.par > br").parent()
.contents()
.filter( function() {
	return this.nodeType == Node.TEXT_NODE && this.nodeValue.trim().length;
})
.wrap("<span></span>");

   taptav.$parentClass.filter('copy,sub,sup').each(function() {
        $(this).replaceWith(this.childNodes);
    });
var changed=0; 
    
taptav.$parentClass
    .contents()
    .find( "sup, sub, copy" )
      .replaceWith(
        function (index) {
	changed=1;
         return $(this).text();
        });
    if (changed > 0) {
    	taptav.$parentClass
    .contents()
    .find( "sup, sub, copy,font[face]" )
      .replaceWith(
        function (index) {
        changed=2;
         return $(this).text();
        });
}
   
    
    
    
    
    if (taptav.$parentClass.find("#contentWrapper").find("#toc").find("h3:contains('Description')").length > 0) {
	addNoTranslateToJapaneseFullText();
    }

    /*taptav.$parentClass.find('span[style*="font-weight"]').each(function() {
	    $(this).replaceWith(this.childNodes);
	});*/
    taptav.$parentClass.find('a[href*="#H"]').each(function() {
	    $(this).replaceWith(this.childNodes);
	});


    taptav
	    .$parentClass
	    .find(".notranslate")
	    .find("p,div,li,span")
	    
	    .addClass("notranslate");
    
}

function addNoTranslateToJapaneseFullText () {
	taptav.$parentClass.find("#contentWrapper")
	.find( "#toc" )
	.find( "a" )
	.addClass( "notranslate" );

	taptav.$parentClass.find("#contentWrapper")
	.find( "h3, h4" )
	.addClass( "notranslate" );
}

function insertTaptaToTranslateTags (index) {
    var t=$(this).text();
    var spanNo=0;
    var newElement = "";
    
    var h=$(this).html();
    if ((typeof this.outerHTML) == 'string') {
	h=this.outerHTML;
    }

    var atTheEnd="";
    while (h.indexOf('<')==0 && h.indexOf('>') > 0) {
	var tag=h.substring(0,h.indexOf('>')+1);
	if ((tag.indexOf('span class="taptaToTranslate') > 0) 
	    || (tag.indexOf('span class=taptaToTranslate') > 0) 
	    || 	(h.indexOf('class="taptat') > 0)
	    || 	(h.indexOf('class=taptat') > 0)) {
	    break;
	}
	if (tag.indexOf('<!--') < 0
	    && tag.indexOf('<meta') < 0) {
	    newElement += tag;
	    
	    if (tag.indexOf('</') < 0 && tag.indexOf('/>') < 0) {
		var tagName=tag.substring(1).replace(/ .*/,""); 
		if ( h.indexOf('</'+tagName) < 0) {
		    atTheEnd=tag.replace(/<([^ >]+)( [^>]+)?>/,"</$1>")+atTheEnd;
		}
	    }
	}
	h=h.substring(h.indexOf('>')+1);
	while (h.substring(0,1) == ' ') {h=h.substring(1);}
    }
    var continuing=0;
    while (t.length >= taptav.maxLengthTxt) {
	var bestSplitPoint=findBestSplitPoint(t,taptav.maxLengthTxt);
	var rest=t.substring(bestSplitPoint);
	if (rest.substring(0,1) == '.' || rest.substring(0,1) == '。') {
	    continuing=-1; 
	    bestSplitPoint++; 
	    if (rest.substring(1,2) == ' ') { 
		rest=rest.substring(2);
	    } else {
		rest=rest.substring(1);
	    }
	} else {
	    continuing++; 
	}
	
	newElement+= "<span class=\"taptaToTranslate\" BP=\"c\" no=\""+spanNo+"\" id=\"ttt"+taptav.taptaToTranslateId+"\" continue=\""+(continuing-1)+"\">"+t.substring(0,bestSplitPoint)+"</span>";taptav.taptaToTranslateId++;
	spanNo++;
	t = rest;
    }
    newElement += "<span class=\"taptaToTranslate\" no=\""+spanNo+"\" id=\"ttt"+taptav.taptaToTranslateId+"\"  continue=\""+continuing+"\">"+t+"</span>"+atTheEnd;
    taptav.taptaToTranslateId++;

    


  
    
    
  
    
    return (newElement);
}

function findBestSplitPoint (t, maxLengthTxt) {
    

    var i;
    var bestComma=0; 
    var bestSpace=0; 
    for (i=maxLengthTxt-1; i > maxLengthTxt/2; i--) {
	var c=t.substring(i,i+1);
	if (c == '.' || c=='。') 
	    return i;
	if (bestComma==0 && (
	    c== ',' 
	    || c==';'
	    || c==':'
||c=='、'
||c=='，'
||c=='：'
||c=='；'
	))
	    bestComma=i;
	if (bestSpace==0 && c==' ')
	    bestSpace=i;
    }
    if (bestComma>0) return bestComma;
    if (bestSpace>0) return bestSpace;

    return maxLengthTxt;
}

function containsNonSpanText () {
    var val= this;

    if (val.childNodes !== null && val.childNodes !== undefined && val.childNodes.length >= 1) {

	
	var eclass= val.className||val.nodeName;
	try {
		eclass=eclass.toLowerCase();
	} catch (e) {
	noconsole.log("Strange eclass:",eclass);
		eclass="";
	}

	if (eclass.indexOf("notranslate") !== -1 || 
	   eclass == "taptatotranslate"|| eclass == "taptat" || eclass == "script") return false;

	
	for (var j = 0; j < val.childNodes.length; ++j) {
	    if (val.childNodes[j].nodeType===3) {
		var t=val.childNodes[j].nodeValue;
		t=t.replace(/<\!\-\-.*\-\->/g,"");
		t=t.replace(/[\n\r\t ]/g,"");
		t=t.replace(/\&nbsp\;/gi,"");
		if (t.length > 1) {
		    if (t.match(/[^0-9\[\]\{\}\/\.\,\<\>\'\"⁣ ]/)) {

			return true;
		    }
		}
	    }
	}
    }
    return false;
}

function textOkToTranslate() { 
    if ((typeof this.innerHTML) == 'string') {
	var h=this.innerHTML;
	if (h.indexOf('class="taptaToTranslate') > 0 || h.indexOf('class=taptaToTranslate') > 0) {
	    return false;
	}
	if (h.indexOf('class="taptat') > 0 || h.indexOf('class=taptat') > 0) {
	    return false;
	}
	if (h.indexOf('class="ipc') > 0 || h.indexOf('class=ipc') > 0) {
	    return false;
	}
	if (h.indexOf('class="utext') > 0 || h.indexOf('class=utext') > 0) {
            return false;
        }
	
	if (h.indexOf('Not translatable') > 0) {
	    return false;
	}
	
	var i1=h.replace(/<script[^<>]+>.*?<\/script>/g,"").replace(/ *<[^<>]+> */g,"").replace(/\&nbsp\;/gi," ").replace(/[\n\t ][\n\t ]*/g," ").replace(/^ /,"").replace(/ $/,"");
	    
	var l1=i1.length;
	if (l1 > 1) {return true;}
	else {return false;}
    } else {
	l=this.nodeValue.replace(/\&nbsp\;/gi," ").replace(/[\n\t ][\n\t ]*/g,"").length;
	myLength+=l;
    	return (l > 1);
    }
}
 
function textTooLong() { 
    var l;
    
    if ((typeof this.innerHTML) == 'string') {	
	var s=this.innerHTML;
	if (s.indexOf('class="taptat') > 0 || s.indexOf('class=taptat') > 0 ) {return false;}
	if (s.indexOf('class="notranslate') > 0 || s.indexOf('class=notranslate') > 0) {return false;}
	if (s.indexOf('class="ipc') > 0 || s.indexOf('class=ipc') > 0) {return false;}
	if (s.indexOf('class="taptaToT') > 0 || s.indexOf('class=taptaToT') > 0 ) {return false;}
        if (s.indexOf('<p') > 0 || s.indexOf('<div') > 0) {return false;}
        if (s.indexOf('<P') > 0 || s.indexOf('<DIV') > 0) {return false;}

	
	l=this.innerHTML.length;
	if (l > 3 && totalLength==0) { 
	    var inhtml=this.innerHTML;
	    var i1=inhtml.replace(/<script[^<>]+>.*?<\/script>/g,"").replace(/ *<[^<>]+> */g,"").replace(/\&nbsp\;/gi," ").replace(/[\n\t ][\n\t ]*/g," ").replace(/^ /,"").replace(/ $/,"");
	    
	    var l1=i1.length;

	    myLength+=l1;
	}



    	if (l > taptav.maxLengthTxt+30) {
    			noconsole.log("texttoolong?="+this.innerHTML);
 
  
   
    			
    			
    	    return true;
    	} else {
    	    return false;
    	}
    } else if (this.nodevalue==null) {
	return false;
    } else {
	l=this.nodeValue.length;
	myLength+=l;
    	return (l > taptav.maxLengthTxt);
    }
}

function callTaptaQuickTranslate(text, langpair) {
    if (langpair == null || langpair.length == 0) {
	if (taptav.lLangpair == null || taptav.lLangpair <= 0) {
	    taptav.lLangpair = guessLanguageFromPage();
	}
	langpair=taptav.lLangpair;
    }
    if (langpair.substring(0,2) == 'xx') {
	var guessed=taptav.guessLanguageFromText(text.toLowerCase());	
	langpair=guessed+langpair.substring(2);
    }

    var url=taptav.myWipoUrl+"/quickTranslate.jsf?langpair="+langpair.substring(0,2)+"-"+langpair.substring(2)+"&q="+text;
    
   noconsole.log ('call tapta with text='+text+" url="+url);
    
    window.open(url,'_new', "height=300,width=800");
}

function hideDisplayTaptaToolTip (node, hideId) {
    if (taptav.hideId==hideId) {
	$('#taptaAdds').fadeOut("fast", "linear");
	taptav.currentId =""; 
	node.css({"background-color":"#EEEEFF","cursor":"pointer","text-shadow":"0px 0px 0px #000"});
    }
}

function launchDisplayTaptaToolTip (node) {
	
	if (taptav.currentId == null || taptav.currentId != node.attr('id')) {
		if (taptav.currentId != null && taptav.currentId.length) {
			$('#'+taptav.currentId).css({"background-color":"#EEEEFF","cursor":"pointer"});
		}
		taptav.currentId = node.attr('id');
		node.css({"background-color":"lightblue","cursor":"zoom-in","text-shadow":"2px 2px 3px #666"});
		var taptaAdds = "<span id=\"ttt_"+taptav.currentId+"\"><hr/><br/><span class=\"taptaOrig\" langpair=\""+node.attr('langpair')+"\"><b>["+node.attr('langpair')+"]</b><span class=\"taptaOrigText\">"+node.attr('orig')+"</span></span><br/>";
		if (taptav.options.compare) { 
			if (taptav.wipoLanguagePairs[node.attr('langpair')]) {
				taptaAdds += "<br/><span class=\"taptaOrigButton\">"+(taptav.type=='tapta'?'':'Compare with:')+taptav.wipoImgIcon+"Wipo Translate</span><br/><hr/></span>";	
			}
		}
		$('#taptaAdds').html(taptaAdds);
		$('#taptaAdds').hover(function(){taptav.hideId='';});



		$('#taptaAdds').fadeIn("fast", "linear");

		if (taptav.wipoLanguagePairs[node.attr('langpair')] || taptav.wipoLanguagePairs[node.attr('langpair').replace("-NMT-","")]) {
		    var lp=$('.taptaOrig').attr('langpair');
		    $('.taptaOrigText').mouseup(function(e) {
			    var t=taptav.mySelect();

			    $('#taptaAdds').html("");
			    callTaptaQuickTranslate(t, lp)}
			);
		    $('.taptaOrigButton').css(taptav.taptaButtonStyles);
		    $('.taptaOrigButton').click(function (e) {
			    var t=$('.taptaOrigText').text();
			    $('#taptaAdds').html("");
			    callTaptaQuickTranslate(t, lp);
			});
		} else {
		noconsole.log('Cannot do language pair: '+node.attr('langpair'));
		}
	}
}

function taptatMouseOn (e) {
    var node=$(this);
    taptav.hideId='';
    setTimeout(function() {       

	launchDisplayTaptaToolTip(node);
    }, 1000);
}
function taptatMouseOut (e) {
    var node=$(this);
    var r=Math.random();
    taptav.hideId=r;
    
    setTimeout(function() {       
	node.css({"background-color":"#EEEEFF","cursor":"pointer","text-shadow":"0px 0px 0px #000"});
	hideDisplayTaptaToolTip(node, r);
    }, 1000);
}
      	
function postProcessTranslations() { 

	
	
	
	

	var cannotNodes=$(".taptaToTranslate:contains('"+Ccannot+"')");
	

	cannotNodes.attr("title","Not translatable with "+taptav.type);
	var re = new RegExp(Ccannot,"g");

	cannotNodes.replaceWith(function() {
		return $( this ).html().replace(re,"");
	});
	cannotNodes.addClass('notranslate');
	cannotNodes.removeClass('taptaToTranslate');

	if (taptav.MaxTranslations <= 20) { 
		taptav.MaxTranslations += 5;
	}

	$('.taptaToTranslate > .taptat').parent().each(function() {
			$(this).replaceWith(this.childNodes);
	});

	$(' .taptaToTranslate > .ctapta').parent().each(function() {
		if (captchaAlreadyRequested) {
		noconsole.log("Skipping post processing step due to captcha");
			$(this).removeClass('taptaTranslating');
		} else {
			$(this).replaceWith(this.childNodes);
		}
});
	
	var taptaNodes=$('.taptat:not([postp])');
	taptaNodes.css({"background-color":"#EEEEFF", "cursor":"initial"});




	
	taptaNodes.hover(taptatMouseOn, taptatMouseOut);
	taptaNodes.css("cursor","pointer");
	taptaNodes.attr('postp','postp');

	$('.taptaToTranslate').attr("title","Click to translate");
	taptaNodes = $('.taptaToTranslate:not([postp])');
	var firstTaptaToTranslate = taptaNodes.first();
	firstTaptaToTranslate.css("cursor","s-resize");
	firstTaptaToTranslate.click(function (e) {
		taptaTranslate(taptav.myParent_class,taptav.myLangpair);
	});
	firstTaptaToTranslate.attr("title","Click to continue translate");



	taptaNodes.slice(1).on("click",function(e) {
		taptaTranslateThis($(this));
	});

	
	taptaNodes.on('inview', function(event, visible) {
		taptaToTranslateVisibilityChange($(this), visible);
	});


	taptaNodes.attr('postp','postp');


	taptav.countSpanToTranslate = $('.taptaToTranslate').length;
	taptav.countSpanTranslated = $('.taptat').length;
	var pctTranslated = 0;
	if ((taptav.countSpanTranslated+taptav.countSpanToTranslate)>0) {
		pctTranslated=100*( taptav.countSpanTranslated /  (taptav.countSpanTranslated+taptav.countSpanToTranslate));
		taptav.taptaProgressBar.progress(pctTranslated);
	}

	if (! taptav.errorDisplayed) {
		if (isIe) {
			$('#taptaAdds').html("<div id=\"taptaAdds\">Please note that "+taptav.taptaTitle+" works better on Mozilla,Chrome or Safari</div>");
		} else {
			$('#taptaAdds').html("<div id=\"taptaAdds\"></div>");
		}
	}
	
	var continueDisplay=false;

	if (pctTranslated <= 99) {
		taptav.$parentClass.find('span.taptaToTranslate')
		.filter( containsStop )
		.replaceWith(function (index) {
			taptav.ataptaAnchor++;
			continueDisplay=true;
			if ((typeof this.outerHTML) == 'string') {	
				var ret= this.outerHTML.replace(Cstop,"").replace(Cend,"").replace(Cbegin,"");
				var indexInsert=ret.indexOf("</td>");
				if (indexInsert<0) {indexInsert=ret.length;}
				ret=ret.substring(0,indexInsert)+
				"<a name=\"atapta"+taptav.ataptaAnchor+"\"/><a name=\"ctapta\" class=\"ctapta\" href=\"#atapta"+taptav.ataptaAnchor+"\" onclick=\""+taptav.type+"Translate( '"+taptav.myParent_class.replace(/\"/g,"&quote;")+"','"+taptav.myLangpair+"')\">"+taptav.imgIcon+taptav.lbContinueTranslate+"<br class=3/></a>"
				+ret.substring(indexInsert);
				return ret;
			} else {
				return "<a name=\"atapta"+taptav.ataptaAnchor+"\"/><a name=\"ctapta\" class=\"ctapta\" href=\"#atapta"+taptav.ataptaAnchor+"\" onclick=\""+taptav.type+"Translate('"+taptav.myParent_class.replace(/\"/g,"&quote;")+"','"+taptav.myLangpair+"')\">"+taptav.lbContinueTranslate+"<br class=4/></a>"
				+$(this).text().replace(Cstop,"").replace(Cend,"").replace(Cbegin,"");

			}
		}
		);
	}
	if (linkToCaptchaDisplayed) {
		
		if (!captchaAlreadyRequested) {
			captchaAlreadyRequested = true;
			taptav.$parentClass.contents()
			.filter( containsCaptcha )
			.replaceWith(function (index) {
				continueDisplay=true;
				$('#taptaContinue').emptyHtml();

				return "<a name=\"ctapta\" class=\"ctapta\">Please release a Captcha "+taptav.lbContinueTranslate+"<br class=5/></a>"
				+$(this).text().replace(Ccaptcha,"");
			

			}
			);
		}
	}
	if (continueDisplay) {
		$('.ctapta').css( taptav.taptaButtonStyles );
	}
	if (pctTranslated <= 99) {
		if ($('a[name='+taptav.ataptaAnchor+']').length) {
			$('#taptaTooltipPlus').html(" <a href='#atapta"+taptav.ataptaAnchor+"'>Jump to next untranslated</a>");
		} else {

			
			var stopstring="<a name=\"ctapta\" class=\"ctapta\" href=\"#atapta"+taptav.ataptaAnchor+"\" id=\"taptaContinueInTooltip\" onclick=\""+taptav.type+"Translate('"+taptav.myParent_class.replace(/\"/g,"&quote;")+"' ,'"+taptav.myLangpair+"')\">"+taptav.imgIcon+taptav.lbContinueTranslate+"</a>";
			stopstring="..<span bgcolor=\"#4A75B5\">"+stopstring+"</span>...</a><br/>";
			$('#taptaTooltipPlus').html(stopstring);
			$('#taptaContinueInTooltip').css( taptav.taptaButtonStyles );

		}
	}

      
      

      textNodes = taptav.$parentClass
	.contents()
	.filter( containsCendCbegin )
  	.each(
	    replaceCendCbegin
		    );
    
  }
function replaceCendCbegin(i, val, providedNode) {
    var t;
    if (val.nodeType === 3) { 
	val.nodeValue = replaceOneCendCbegin(val.nodeValue) ;

	
    } else if (val.nodeType === 1) { 
	if (val.childNodes !== null && val.childNodes !== undefined && val.childNodes.length >= 1) {

	    for (var j = 0; j < val.childNodes.length; ++j) {

		if (val.childNodes[j].nodeType===3) {

		    var r=replaceOneCendCbegin(val.childNodes[j].nodeValue);
		    if (r.indexOf(">") > -1) {
			val.childNodes[j].nodeValue = r.replace(/<[^>]*>/g,"");
			val.attributes['orig'] = r.replace(/.*<[^>]*orig=\"(.*)\">.*/g,"$1");
		    }
		} else {
		    replaceCendCbegin(-1, val.childNodes[j]);
		}
	    }
	} else {
	    if (val.nodeValue != null) {
		val.nodeValue=replaceOneCendCbegin(val.nodeValue) ;
	    }
	}
    }
}

function replaceOneCendCbegin(t) {
	
    var i=t.indexOf(Cbegin,t.indexOf(Cend+Cbegin)+Cend.length+1);
    if (i < 0) {
	return t;
    }
    var replacement="";
    while (i>1) {
  	var originalText=t.substring(i+Cbegin.length);
	originalText=originalText.substring(0,originalText.indexOf(Cend));
  	var translatedText=t.substring(0,i);
	translatedText=translatedText.substring(translatedText.indexOf(Cend)+Cend.length+Cbegin.length);
  noconsole.log("orig="+originalText+"="+translatedText);
  	replacement += "<span class=\"taptat\" id=\"taptas"+ (taptav.taptaseg++) +"\" orig=\"Original text: "+escapeOriginalText(originalText)+"\">"
  	    +Ctrld 
	    +taptaFixOutput(translatedText).replace(/\r/g,"<p/>")
  	    +"</span>";
  	t=t.substring(t.indexOf(Cend, t.indexOf(Cend+Cbegin)+Cend.length+1)+Cend.length);
	if (t.indexOf(Cend) > 0) { 
	    replacement += t.substring(0,t.indexOf(Cend)); t = t.substring(t.indexOf(Cend));
	}
	i=t.indexOf(Cbegin,t.indexOf(Cend+Cbegin)+Cend.length+1);
	if (i > 1) {
	    replacement =replacement.replace(/<p\/>/g," ");
	}
    }
    return replacement;
}
	
function isTextNode() {
    return (this.nodeType === 3); 
 }
  
  function containsStop() { 
		if ((typeof this.innerHTML) == 'string') {	

			return (this.innerHTML.indexOf(Cstop) > -1);
		} else {

			return (this.nodeValue.indexOf(Cstop) > -1);
		}
  }
  function containsCaptcha() { 
		if ((typeof this.innerHTML) == 'string') {	
			return (this.innerHTML.indexOf(Ccaptcha) > -1);
		} else {
			return (this.nodeValue.indexOf(Ccaptcha) > -1);
		}
}
  
function containsCendCbegin () { 
    
    
    
    if ((typeof this.innerHTML) == 'string') {	
	var idxCend=this.innerHTML.indexOf(Cend+Cbegin);
	if ((idxCend > -1) && (this.innerHTML.indexOf(Cbegin,4) > idxCend)) {
	    return true;
	}
    } else {
	if ((this.nodeValue.indexOf(Cend+Cbegin) > -1) && (this.nodeValue.indexOf(Cbegin,4) > this.nodeValue.indexOf(Cend+Cbegin))) {
	    return true;
	}
    }
    return false;
}
  
function translateElementArray (i, val, providedNode) {
    var node=providedNode || taptav.myNodes[i];
	 
    if (taptav.stop) return;

    if (taptav.countTranslated <= taptav.MaxTranslations-1) {
	if (val.nodeType === 3) { 
	    if (val.nodeValue !== null) {
		var t=val.nodeValue.replace(/[\n\r\t]/g," ").replace(/\&nbsp\;/gi," ").replace(/  +/g," ").replace(/^ +/,"").replace(/ +$/,"")
		if (t.length > 1) {
		    if (t.match(/[^0-9\[\]\{\}\/\.\,\<\>\'\"⁣ \t]/)) {
			if (! t.match(Cend) && ! t.match(Ctrld)) {
			   noconsole.log ('to trans:'+i+" ''"+val+ "'' v="+t+" node="+node+" type="+typeof node+";"+(typeof node.replaceWith)+" nodetype="+(typeof node));
			    if (typeof node.replaceWith == 'function') {	
				node.replaceWith("<i class=\"runningtapta\">"+Cbegin+t+Cend+"</i>");
			    } else {
				val.nodeValue=Cbegin+val.nodeValue+Cend;
			    }
			    translateTxtElement(val, t, node);
			}
		    }
		}
	    }
	} else {
	    if (val.nodeType === 1) { 
		var eclass= val.className;
		if (eclass != "notranslate" 
		    && eclass != "taptat") {
		    var s= ""+val+"";
		    if (s.match(/HTMLScriptElement/) 
			|| s.match(/HTMLStyleElement/)) {

			if (typeof node.replaceWith == 'function') {	
			    node.replaceWith("<br class=1/>");
			} else {
			    if (val.childNodes !== null && val.childNodes !== undefined) {
				for (var j = 0; j < val.childNodes.length; ++j) {
				    if (typeof val.childNodes[j].replaceWith == 'function') {	
					val.childNodes[j].replaceWith("<br class=6/>");
				    } else {
					val.childNodes[j].nodeValue=" ";
				    }
				}
			    }
			    if (typeof node.empty == 'function') {
				node.empty();
			    } else {
				val.nodeValue="<br class=2/>";
			    }
			}
		    } else {
			var l=val.getAttribute('lang');
			if (l != null && l) {
			    taptav.currentLang=l.substring(0,2);
			}

			if (val.childNodes !== null && val.childNodes !== undefined) {
			    var len = val.childNodes.length;
			    for (var j = 0; j < len; ++j) {
				
				
				translateElementArray((j/100)+i,val.childNodes[j], (len==1?node:val.childNodes[j]));
				
			    }
			}
			if (l != null && l) {
			    taptav.currentLang="";
			}
		    }
		}
	    } else {
	noconsole.log ('to trans unkown:'+i+" ''"+val+ "'' v="+val.nodeValue);
	    }
	}
    }
}

function translateTxtElement(text, textToTranslate, node) {

	taptav.countTranslated++;
noconsole.log("countbp="+taptav.countTranslated+" textToTranslate=''"+textToTranslate.substring(0,30).replace(/\n/g," ")+"''");
	if (taptav.countTranslated >= taptav.MaxTranslations) {
		if (taptav.countTranslated == taptav.MaxTranslations) {
			
			
			taptav.stop=true;
		noconsole.log("Stopped node:"+node.innerHTML);
			if ((typeof node.innerHTML) == 'string') {	
				var i=node.innerHTML.indexOf(Cbegin);
				if (i >= 0) { 
					try {
						node.innerHTML = node.innerHTML.substring(0,i)+Cstop+node.innerHTML.substring(i);
					} catch (e) {
						
						
						
					}
				} else {
					node.innerHTML = Cstop+node.innerHTML;
				}
			} else {
				node.nodeValue = Cstop+node.nodeValue;
			}
		}

	} else {
		if (textToTranslate.indexOf("document.write") >= 0) {
			textToTranslate = textToTranslate.replace(/ *document\.write\([^\)]*\);? */g," ");
		}

		alert("HERE I AM");translateOneTxtElement(text, textToTranslate, node);
	}
}


function translateOneTxtElement(text, textToTranslate, node, llang, context) {	

	
    
    var lLangpair=taptav.myLangpair;

    if (llang == "ru-TR") {
    	lLangpair="ru-TR-en";

    } else if (llang == "jp-TR") {
    	lLangpair="jp-TR-en";

    } else if (taptav.myLangpair.substring(0,2) == "xx") {
    	if (llang) {
    		taptav.currentLang=llang;
    	}
    	lLangpair=taptav.currentLang|| 'en';
    noconsole.log("Same source as target?? llagnpair="+lLangpair+" mylangpair="+taptav.myLangpair+" text="+text);

    	if (lLangpair == taptav.myLangpair.substring(2)) { 
    	noconsole.log("Same source as target llagnpair="+lLangpair+" mylangpair="+taptav.myLangpair+" text="+text);
    		$(node).removeClass('taptaToTranslate taptaTranslating');
    		$(node).attr('taptaToTranslate');

    		return;
    	}
    	lLangpair=lLangpair+taptav.myLangpair.substring(2);
    	var lp=taptav.languagePairs[lLangpair];
    	if (! lp) {
    		var trylp=taptav.currentLang|| 'en';
    		if (trylp != 'en' && taptav.languagePairs[trylp+'en']) {
    			if (taptav.myLangpair.substring(2) == 'ja') { trylp = trylp+'-en-jp';}
    			else {trylp = trylp+'-en-'+taptav.myLangpair.substring(2);}
    			    			
    		noconsole.log("translateOneTxtElement: do not know langpair "+lLangpair+ " try:"+trylp);
    			lLangpair= trylp;
    		} else {
    			if ((typeof node.innerHTML) == 'string') {	
    				node.innerHTML = Ccannot+node.innerHTML;
    			} else {
    				node.nodeValue = Ccannot+node.nodeValue;
    			}
    			return;
    		}
    	}
    }
    if (lLangpair == "enja") {lLangpair="enjp";}

    
    taptav.countTranslated++;
 	if (taptav.currentCallsCount >= taptav.maxConcurrentAjaxCalls) {
         return taptav.submitBuffer.push(arguments) 
     }
 	
 	taptav.currentCallsCount++

   
   if (context) {
       myDomain=context;
   } else {
       if (taptav.defaultContext == 'guess') {
	   try {
		   var myIpc=$(".taptaMtNew").attr('ipc');
		   var v=$(".taptaInfo").attr('values');
		   if (myIpc == null || myIpc == "") {
			   myIpc=v.replace(/.*ipc: (<[^>]+>)*([A-Z0-9]{4,4}).*/,"$2");
			   
			   if (myIpc == v && v.toLowerCase().indexOf('ipc:') > -1) {
                   myIpc = v.replace(/.*ipc:(.*)/i, "$1");
                   
                   var firstIpcCode = myIpc.match(/[A-H]\d\d[A-Z]*( *\d\d*\/\d\d)*/);
                   myIpc = firstIpcCode[0].replace(/\s/g, "");
                   
              }

		   }
		   var myYear=$(".taptaMtNew").attr('year');
	       taptav.defaultContext="IPC:"+myIpc;	
	   } catch (e) {taptav.defaultContext ="UUUU";};
       }
       myDomain=taptav.defaultContext; 
   }
    $.when (ajGetTaptakey).done(function(){
	    
	    
    	
    
    if (lLangpair.indexOf("-TR") < 0) {
    	lLangpair = lLangpair.substring(0,2)+"-NMT-"+lLangpair.substring(lLangpair.length-2);
    }
	if (lLangpair == 'ja-NMT-en') {lLangpair == 'jp-NMT-en';}
	if (taptav.myTaptaKey != "error" && taptav.myTaptaKey != "checking") {
	noconsole.log("Translate OneTxtElement''"+textToTranslate+"'' key="+taptav.myTaptaKey+" lp="+lLangpair+";");

		outOpt=""; 
		if ($(node).parents().hasClass('NPtitle')) outOpt="t";
	    try {
	    	a=node.attributes['continue'];
	    	if (node.attributes['continue'].value > 0) {
	    		outOpt="";
	    	}
	    } catch (e) {}
	    
	   noconsole.log("creating params");
	   noconsole.log(arguments);
	   noconsole.log(text);
	   noconsole.log(node);
	    
	    var transParams2 = {
				"text": text,
				"textToTranslate": textToTranslate,
				"node" : node,
				"llang" : llang,  
				"context" : context
		};
	    
	    var transParams = {
    				"langpair":lLangpair,
    				"taptakey":taptav.myTaptaKey,
    				"domain" : myDomain,
    				"outOpt" : outOpt,  
    				"q" : textToTranslate.replace(/<[^>]+>/g, '').replace(/[\t\n\r ]+/g," ")
    		};
    		var url=taptav.myTaptaUrl+"/"+taptav.transURL;
    		var mydataType='text';
    		var myjsonp = false;
    		if (taptav.type == 'baidu') {
    			var salt = (new Date).getTime();
    			var query = textToTranslate.replace(/\&nbsp;/," ").replace(/<[^>]+>/g, '').replace(/[\t\n\r ]+/g," ");
    			var str1 = taptav.baiduAppid + query + salt +taptav.baiduSecret;
    			var sign = MD5(str1);

    			
    			mydataType='jsonp';
    			myjsonp='callback';
    			transParams = {
    					"from":taptav.baiduLgCode(lLangpair.substring(0,2)),
    					"to":taptav.baiduLgCode(lLangpair.substring(lLangpair.length - 2)),
    					"q" : query,
    					type:"GET",
    					timeout: 15000,
    					appid: taptav.baiduAppid,
    					sign: sign

    			};
    			url=taptav.myTaptaUrl;
    		noconsole.log("baiducall: "+url+"?client_id="+transParams.client_id+"&from="+transParams.from+"&to="+transParams.to+"&q="+transParams.q+"&callback="+transParams.callback);

    		}
    		if (taptav.type == 'yandex') {
    			mydataType='jsonp';

    			transParams = {
    					"lang":lLangpair.substring(0,2)+'-'+lLangpair.substring(lLangpair.length - 2),
    					"to":lLangpair.substring(lLangpair.length - 2),
    					"text" : textToTranslate.replace(/\&nbsp;/," ").replace(/<[^>]+>/g, '').replace(/[\t\n\r ]+/g," "),
    					key:taptav.yandexKey
    					,		    callback: 'successFunction'
    			};
    			url=taptav.myTaptaUrl;
    		noconsole.log("YandexCall: "+url+"?key="+transParams.key+"&lang="+transParams.lang+"&text="+transParams.text+"&callback="+transParams.callback);
    		}
	    taptav.countRequestSubmitted++;

	   
	    
	    var protocol = "";
	   noconsole.log("myUrl="+taptav.myTaptaUrl);
	    if (taptav.myTaptaUrl.indexOf("https") == 0) {
	    	protocol = "https";
	    } else {
	    	try {
	    		protocol = document.location.protocol;
	    	} catch(e)  {}; 
	    }
	    if (protocol=="") {
	    	try {
	    		protocol = (window.location.indexOf("https://")==0?"https":"http");
	    	} catch(e)  {};
	    }

	    taptav.captchaUrl=taptav.myTaptaUrl+"/taptawidget/widgetCaptchaRelease.jsp";

	    if (protocol == "http:") {
	    	url=url.replace(/https/,"http");
	    }

	    

	    $.ajax({
	    cache: false,
		dataType:mydataType,
		jsonp:myjsonp,
		url: url,
		data: transParams,
		type: "GET",
		timeout: taptav.defaultTimeOut,
		crossDomain: true,
		xhrFields: taptav.xhrFields,

		success: 
			(
					function (dataf) {

					noconsole.log("received txt:''"+dataf+"'' countTr="+taptav.countRequestTranslated+" node="+node+" type="+(typeof node.innerHTML)+"'' lp=''"+transParams.lang);
						var data='';
						if (taptav.type == 'baidu') {
							
						noconsole.log("url="+url+"?client_id="+taptav.baiduKey+"&from="+transParams.from+"&to="+transParams.to+"&q="+transParams.q+" dataf="+objectToJson(dataf));

							if (dataf.error_msg) {
							noconsole.log("ERROR: '"+dataf.error_msg+"' Returned dataf:"+objectToJson(dataf));
								taptav.countRequestInError++;
								data='<error type="baiduerror">'+dataf.error_msg+"</error>";
							} else {
							noconsole.log("Returned dataf:"+objectToJson(dataf)+" nbresults:"+dataf.trans_result.length);
								var nOfAnswers = dataf.trans_result.length;
								for (var i = 0; i < nOfAnswers; i++) {
									data += dataf.trans_result[i].dst;
								}
							}
						} else if (taptav.type == 'yandex') {
						noconsole.log("url="+url+"?key="+transParams.key+"&lang="+transParams.lang+"&text="+transParams.text);
						noconsole.log("Returned dataf:"+objectToJson(dataf));
							data=dataf.text[0];
						} else {
							data=dataf;
						}
						if (data.indexOf("<error") < 0 
								
						)  {

							if ((typeof node.innerHTML) == 'string') {	
								try {
								    var dirForTargetLanguage=""; 
								    
								    if (lLangpair.indexOf("ar", lLangpair.length - 2) !== -1) {dirForTargetLanguage=" dir=\"rtl\"";}
									node.innerHTML="<span class=\"taptat\" id=\"taptas"+ (taptav.taptaseg++) +"\" orig=\""+escapeOriginalText(transParams.q)+"\" bp=\"translateOneTxtElement-string\" langpair=\""+lLangpair+"\""+dirForTargetLanguage+">"+Ctrld+taptaFixOutput(data)+"</span>";
								} catch (e) {
									
									node.nodeValue = Cend+Cbegin+data.replace(/\n/g," ")
									+Cbegin+transParams.q+Cend;
								}
							} else {
								
								node.nodeValue = Cend+Cbegin+data.replace(/\n/g," ")
								+Cbegin+transParams.q+Cend;
							noconsole.log("NODE:"+node.nodeValue);

							}
							translatedLength += transParams.q.length;
						} else {
							
							
							taptav.taptaProgressBar.show();

							
							
							
							
							
							
							
							if (! linkToCaptchaDisplayed && data.indexOf("imgCaptcha") > 0) {
								if ((typeof node.innerHTML) == 'string') {	
									node.innerHTML="<a name=\"ctapta\" class=\"ctapta\">[Please release a Captcha in order to continue translation]</a><br class=8/>"
										+ node.innerHTML;
								} else {
									node.nodeValue = Ccaptcha+node.nodeValue;
								}


								linkToCaptchaDisplayed=true;
							} 
							if (linkToCaptchaDisplayed) {
								if (!captchaAlreadyRequested) {
									captchaAlreadyRequested = true;
									taptav.errorDisplayed=true;
									$('#taptaAdds').html();
									$('#taptaCaptchaPlaceholder').html(taptav.imgIcon+taptav.taptaTitle+"<br/>Unfortunatelly, our server cannot handle too many translation requests...<br/>Note that this will be fixed in the future, please reload the page and use another translation engine, sorry for the inconvenience<p/> Captcha required <img name=\"imgCaptcha\" id=\"imgCaptcha\" src=\""+taptav.myTaptaUrl+"/WipoCaptcha/"+Math.random()+"?widget=1\" border=\"1\" /><br/>Type the text: <input type=text id=captchaText name=captchaText /><button id=captchaButton onclick=submitCaptchaText>ok</button> <br class=9/><p><p><br class=10/>");

									$('#captchaText').keyup(function(e){ 
										if (e.keyCode == 13) {
									    	submitCaptchaText();
										}
								    })

									jQuery('button#captchaButton').focus() 

									$("button#captchaButton").click(submitCaptchaText);
								}
							} else {
								taptav.errorDisplayed=true;
								$('#taptaAdds').html(data);
							}

						}
						taptav.countRequestTranslated++;
						taptav.documentTranslatedSegments++;

						taptav.countSpanTranslated++;
						taptav.countSpanToTranslate--;

						var pctTranslated = 0;
						if ((taptav.countSpanTranslated+taptav.countSpanToTranslate)>0) {
							pctTranslated=100*( taptav.countSpanTranslated /  (taptav.countSpanTranslated+taptav.countSpanToTranslate));
							taptav.taptaProgressBar.progress(pctTranslated);
						}




						if ((taptav.countRequestTranslated+taptav.countRequestInError) >= taptav.countRequestSubmitted) {
							postProcessTranslations();
						}
						if ((taptav.countSpanTranslated + taptav.countRequestInError) >= taptav.countSpanToTranslate) {
						noconsole.log("finished: subm="+taptav.countRequestSubmitted+" taptav.countRequestTranslated="+taptav.countRequestTranslated+ " taptav.countRequestInError=" + taptav.countRequestInError);

							postProcessTranslations();
							taptav.taptaProgressBar.progress(100);
							$('#taptaAdds').html("<i>Everything translated</i>");
						} else {
						noconsole.log(" translated/totranslate="+taptav.countSpanTranslated+"/"+taptav.countSpanToTranslate+ " subm="+taptav.countRequestSubmitted+" taptav.countRequestTranslated="+taptav.countRequestTranslated+ " taptav.countRequestInError=" + taptav.countRequestInError);
						}
					}
			) 
			,
			error: (function(xhr, textStatus, errorThrown) {
				var errorMessage = errorThrown || xhr.statusText;
				if (textStatus==null) {textStatus='';}
				if (taptav.countRequestInError < 2) {
					if (taptav.type == 'baidu') {
						alert( "Error baiduTranslate in translateOneTxtElement:''"+textStatus + "''   errorthrow:"+errorThrown+" xhrstatus= "+ xhr.statusText+"  EM="+errorMessage+" url="+url+"?client_id="+taptav.baiduKey+"&from="+transParams.from+"&to="+transParams.to+"&q="+transParams.q);
					} else if (taptav.type == 'yandex') {
						alert( "Error yandexTranslate in translateOneTxtElement:''"+textStatus + "''   errorthrow:"+errorThrown+" xhrstatus= "+ xhr.statusText+"  EM="+errorMessage+" url="+url+"?key="+transParams.key+"&lang="+transParams.lang+"&text="+transParams.text+"&callback="+transParam.callback);
					} else {
						
						if ((typeof textStatus.indexof === 'function') &&  (textStatus.indexof("timeout") > -1)) {
							alert( "Timeout during translation request: the translation server load may be too high, please retry in few minutes" );					
						} else {
						noconsole.log("Error simpleTxtTranslate in translateOneTxtElement: "+url+"?langpair="+transParams.langpair+"&taptakey="+transParams.taptakey+"&domain="+transParams.domain+"&q="+transParams.q)
							if (textStatus == 'timeout') {
								alert("Error: WIPO Translate does not respond on time "+taptav.alertManyTranslationWipo);
							} else {
								alert("We are sorry: WIPO Translate is facing unexpected problem "+taptav.alertManyTranslationWipo);

							}
						}
					noconsole.log("Error simpleTxtTranslate in translateOneTxtElement:"+textStatus + "''   errorthrow:"+errorThrown+" xhrstatus= "+ xhr.statusText+"  EM="+errorMessage+" url="+url+"?langpair="+transParams.langpair+"&taptakey="+transParams.taptakey+"&domain="+transParams.domain+"&q="+transParams.q);
					}
				}
				taptav.countRequestInError++;
				if (taptav.countRequestTranslated + taptav.countRequestInError >= taptav.countRequestSubmitted) {
					postProcessTranslations();
				}
			}) 
	    }).always(function (data) {
	    	taptav.currentCallsCount--
	       noconsole.log("currentCallsCount = " + taptav.currentCallsCount)
	       noconsole.log("This is data, checking buffer " + taptav.submitBuffer.length);
	    noconsole.log(data);
	        if(taptav.submitBuffer.length){
	           noconsole.log("Calling next URL in buffer..." + taptav.submitBuffer.length)
	           noconsole.log("test1");
	           noconsole.log(data);
	           noconsole.log("test");
	            if (data.indexOf("imgCaptcha") < 0) {
		            var args = taptav.submitBuffer.shift();
		           noconsole.log("From buffer, text: " + args[0]);
		           noconsole.log("From buffer, text2: " + args[1]);
		           noconsole.log(args[2]);
		            
		            return translateOneTxtElement(args[0], args[1], args[2], args[3], args[4])
		        
	            }
	            else {
	            noconsole.log("Skipping buffer due to captcha");
	            }
	        }
	    })
	} else {
	   noconsole.log("Not able to translate ''"+textToTranslate+"'' as key is "+taptav.myTaptaKey);
	}
	
    });
    
}

function taptaFixOutput ( data) {
    return data.replace(/\&amp;quot;/g,"\""); 
}


function taptaTranslateOutput (data) {
   noconsole.log("Returned from jsonp translate:"+data.tapta);    
}

function submitCaptchaText () {
   noconsole.log("submit text "+$('#captchaText').val());

    jQuery.support.cors = true;
    var transParams = {
	captchaText: $('#captchaText').val(),
	taptakey: taptav.myTaptaKey,
	context: taptav.myContext
    };
    $.ajax({
	url: taptav.captchaUrl,
	data: transParams,
	type: "GET",
	timeout: taptav.defaultTimeOut,
	crossDomain: true,
	success: function(data,rtype,returnedObject) {

	noconsole.log("Got captcha received answer:''"+data+"''");

		var txt = returnedObject.responseText;
		if (txt.indexOf("error") > -1) { 
			var p=$('#taptaAdds').html();
			$('#taptaCaptchaPlaceholder').html(p.replace(/<\/span>/," <h1>Wrong Captcha</h1>Please reload the page to try again</span>"));
		} else { 
			$('#taptaCaptchaPlaceholder').html("<div id=\"taptaCaptchaPlaceholder\">Captcha Ok</div>");
			setTimeout(function() {       
				$('#taptaCaptchaPlaceholder').html('');
			    }, 1000);
			$('#taptaContinueInTooltip').click();
		}

		taptav.taptaProgressBar.progress(taptav.documentTranslatedSegments+1);
	},
	error: function(xhr, textStatus, errorThrown) {
            var errorMessage = errorThrown || xhr.statusText;
            alert( "error:''"+textStatus + "''   errorthrow:"+errorThrown+" xhrstatus= "+ xhr.statusText+"  EM="+errorMessage);
        }                                  
    });
    jQuery.support.cors = true;



}


var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
};

function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
	return entityMap[s];
    });
}
function escapeOriginalText(string) {
    return String(string).replace(/<[^>+]>/g, '').replace(/["]/g,'&quot;');
}

function emptyHtml() {
    var element = $(this);
    element.detach();
    
}
function launchProgressBar () {

    var myprogressbar =$("<div></div>");
    myprogressbar.css({
        'height':'25px',
        'text-align': 'right',
        'vertical-align':'middle',
        'color': '#fff',
        'width': '0px',
	'z-index': 9999999,
	'right': '30px',
        'border-radius': '3px',
        'background-color': '#0ba1b5'
    });
   noconsole.log("launch progress bar...");
    $('head').append('<style>.ui-progressbar {position: relative;right:30px}.progress-label {position: absolute;left: 50%;top: 4px;font-weight: bold;text-shadow: 1px 1px 0 #fff;}</style>');

    $('body').prepend("<div id=progressbar><div class=progress-label>Loading TAPTA...</div></div>");

    progressbar = $( "#progressbar" );
    taptav.progressLabel = $( ".progress-label" );
    progressbar.progressbar({
	value: false,
	change: function() {
	    
	    progressLabel.text( progressbar.progressbar( "value" ) + "%" );
	},
	complete: function() {
	    progressLabel.text( "Complete!" );
	}
    });







  

}
function launchTaptaProgressBar() {

    if ($('#progress1').length < 1) {
    	
    	getLanguagePairs();


    	var progressBarHtml="<div id=\"progress1\">"
		+" <span id='taptaTooltipHead' class='notranslate' style='text-align:center;'>"+taptav.imgIcon+taptav.taptaTitle
		
		+" <span id=\"mylangpairintooltip\">"+taptav.myLangpair+"</span>" 
	    
		+" <span id=\"taptaClearLog\">.</span>.<span id=\"taptaShowLog\">.</span>" 
		+" <input id=\"taptaLogs\" type=\"hidden\" value=\"\" />" 
		+' <span id="hideTaptaMenuCloseInToolTip" class="notranslate hideTaptaMenu" title="Hide translation / back to original" '+
		' style=\"float:right\">'+
	    '<img src="'+taptav.basehref+'/images/icons/close.png" /></span>'
		+" <span id='taptaTooltipPlus' class='notranslate'></span>" 
		
		+" <div id=\"taptaAdds\"></div>"
		+" <span id=\"taptaCaptchaPlaceholder\"></span>"
		+"</span>"
		+"</div>";

    	$('body').prepend(progressBarHtml);
    	$('.hideTaptaMenu').click(function () { 
    		$('#progress1').html("<br/>Reloading...<br/>");
    		$('.mtMenuContainer').html("<br/>");
    		location.reload()
    	});

    	taptav.taptaProgressBar = $("#progress1").progressbar();
    	taptav.taptaProgressBar.progress(1); 
    	$.lockfixed("div#progress1", {offset: {top: '120px', right: '30px', bottom: 0}});
    	$('#taptaShowLog').click(function () {alert($('#taptaLogs').val());} );
		$('#taptaClearLog').click(function () {$('#taptaLogs').val("");} );
		

		if (taptav.hideProgressBar === undefined) {
			taptav.hideProgressBar = false;
		}
	
		if (taptav.hideProgressBar) {
		noconsole.log("hiding progress bar");
			taptav.taptaProgressBar.hide();
		noconsole.log("done hiding progress bar");
		}

    } else {
 
    	if ($('#mylangpairintooltip').length > 0) {$('#mylangpairintooltip').html(taptav.myLangpair);}
    }
}    


function getTaptaKey(callTranslation) {
    



    var docStats=taptav.estimateSize();
    var transParams = {
	"langpair":taptav.myLangpair,
        "context":taptav.myContext,
	"type": taptav.type,
	"size": docStats.size
    };
    jQuery.support.cors = true;
    var url=taptav.myWipoUrl+"/"+taptav.taptakeyUrlJsonp;


   noconsole.log("Launch get Tapta key -json-: context="+taptav.myContext+" url="+url+"?lanpair="+transParams.langpair+"&context="+transParams.context);
    $.ajax
    ({
	 url: url,
	 data: transParams,
	 type: "GET",
	 timeout: taptav.defaultTimeOut,
	 dataType: "jsonp",
	 jsonp:false,
	 jsonpCallback:'taptaContent',
	 crossDomain: true,
	 
	 done: (function(data) {
		   noconsole.log("Ok done key="+taptav.myTaptaKey); 
		    if (callTranslation) { translateAfterKey();}
		    
		}
	       ),
	 success:(function(data) 
		  {
		     noconsole.log("Ok success key="+taptav.myTaptaKey); 
		      if (callTranslation) { translateAfterKey();}
		  }
		 ),
	 error: function(xhr, textStatus, errorThrown) {
	     var errorMessage = errorThrown || xhr.statusText;
	     if (getTaptaKeyFromJson(callTranslation)) {
		noconsole.log("failed at first but ok with get json");
	     } else {
		 taptav.myTaptaKey="error";
		 
		 
		noconsole.log("url="+url+"?langpair="+taptav.myLangpair+"&context="+taptav.myContext);
		noconsole.log("xhr="+xhr+ " responsetext="+xhr.responseText);
		 var jsonValue = jQuery.parseJSON( xhr.responseText );
		 if (jsonValue != null) {
		    noconsole.log(jsonValue.Message);
		 } else {
		    noconsole.log("even Json is null "+callTranslation);
		 }
	     }
         }                                  
     });
}

function taptaContent(data) { 
 noconsole.log("I am in content! key="+data.taptakey);
  taptav.myTaptaKey=data.taptakey;
}

function getTaptaKeyFromJson(callTranslation) {
    var ok=false;
    $.getJSON( taptav.myTaptaUrl+"/"+taptav.taptakeyUrlJson, {
	"langpair":taptav.myLangpair,
        "context":taptav.myContext,
        "callback":"?" 
    })
	.done(function( data ) {
	    taptav.myTaptaKey=data.taptakey;
	    
	    if (callTranslation) {
		translateAfterKey();
	    }
	    ok=true;
	})
	.fail(function( jqxhr, textStatus, error ) {
	    var err = textStatus + ", " + error;
	   noconsole.log( "Request Failed in json : " + err );
	});
    
    return ok;
}
function getLanguagePairsSelect(type,ls) {
    ld='xx';
   noconsole.log('getLanguagePairsSelect('+type+','+ls+') lp='+taptav.lLangpair);
    if (ls == null || ls == 'xx') {
	if (taptav.lLangpair==null || taptav.lLangpair.length <=0) {
	    taptav.lLangpair=guessLanguageFromPage();
	}

	    ls=taptav.lLangpair.substring(0,2);

	ld=taptav.lLangpair.substring(2);
    }
   noconsole.log('getLanguagePairsSelect ls='+ls+' ld='+ld+' lp='+taptav.lLangpair);

    var countLg=0;
    var html='<select class="taptaSelectLanguage_'+type+'"><option value="">Select Language</option>';
 
var lgNames =
	{"en":"English","af":"Afrikaans","sq":"Albanian","ar":"Arabic","hy":"Armenian","az":"Azerbaijani","eu":"Basque","be":"Belarusian","bn":"Bengali","bs":"Bosnian","bg":"Bulgarian","ca":"Catalan","ny":"Chichewa","zh":"Chinese","hr":"Croatian","cs":"Czech","da":"Danish","nl":"Dutch","eo":"Esperanto","et":"Estonian","tl":"Filipino","fi":"Finnish","fr":"French","gl":"Galician","ka":"Georgian","de":"German","el":"Greek","gu":"Gujarati","ht":"Haitian Creole","ha":"Hausa","iw":"Hebrew","hi":"Hindi","hu":"Hungarian","is":"Icelandic","ig":"Igbo","id":"Indonesian","ga":"Irish","it":"Italian","ja":"Japanese","jw":"Javanese","kn":"Kannada","kk":"Kazakh","km":"Khmer","ko":"Korean","lo":"Lao","la":"Latin","lv":"Latvian","lt":"Lithuanian","mk":"Macedonian","mg":"Malagasy","ms":"Malay","ml":"Malayalam","mt":"Maltese","mi":"Maori","mr":"Marathi","mn":"Mongolian","my":"Myanmar (Burmese)","ne":"Nepali","no":"Norwegian","fa":"Persian","pl":"Polish","pt":"Portuguese","pa":"Punjabi","ro":"Romanian","ru":"Russian","sr":"Serbian","st":"Sesotho","si":"Sinhala","sk":"Slovak","sl":"Slovenian","so":"Somali","es":"Spanish","su":"Sundanese","sw":"Swahili","sv":"Swedish","tg":"Tajik","ta":"Tamil","te":"Telugu","th":"Thai","tr":"Turkish","uk":"Ukrainian","ur":"Urdu","uz":"Uzbek","vi":"Vietnamese","cy":"Welsh","yi":"Yiddish","yo":"Yoruba","zu":"Zulu"};
    var lp = taptav.languagePairs;
    if (type == 'baidu') {lp=taptav.baiduLanguagePairs;}
    if (type == 'wipo') {lp=taptav.wipoLanguagePairs;}
    if (type == 'yandex') {lp=taptav.yandexLanguagePairs;}
    for(var lid in lgNames) {
	if (lp[ls+lid]) {
	    
	    html += "<option value=\""+lid+"\""+
		(lid == ld?"selected=1":'')+
		">"+lgNames[lid]+"</option>";
	    countLg++;
	}
    }
    html +="</select>";
    if (countLg == 0) { return "";}
    if (countLg == 1) {}
    return html;
}

function getLanguagePairs() {
  taptav.wipoLanguagePairs = {
    "aren":1,"enar":1,"fren":1,"zhen":1,"deen":1,"jaen":1,"esen":1,"ruen":1,"koen":1,"jaen":1, 
    "enfr":1,"enzh":1,"ende":1,"enjp":1,"enes":1,"enru":1,"enko":1,"enja":1,
'jpen':1,'pten':1,'enpt':1,
	'xxen':1
    };
    var lgs=['ar','de','en','es','fr','ja','ko','ru','th','ko','it','ye','tw','zh','xx'];
    taptav.baiduLanguagePairs = {};
	for(var i=0, len=lgs.length; i < len; i++){
		for(var j=0, len=lgs.length; j < len; j++){
			if (lgs[i] !=  lgs[j]) {
				taptav.baiduLanguagePairs[lgs[i]+lgs[j]]=1;
			}
		}
	}














    taptav.yandexLanguagePairs = {	
	"azru":1,"bebg":1,"becs":1,"bede":1,"been":1,"bees":1,"befr":1,"beit":1,"bepl":1,"bero":1,"beru":1,"besr":1,"betr":1,"bgbe":1,"bgru":1,"bguk":1,"caen":1,"caru":1,"csbe":1,"csen":1,"csru":1,"csuk":1,"daen":1,"daru":1,"debe":1,"deen":1,"dees":1,"defr":1,"deit":1,"deru":1,"detr":1,"deuk":1,"elen":1,"elru":1,"enbe":1,"enca":1,"encs":1,"enda":1,"ende":1,"enel":1,"enes":1,"enet":1,"enfi":1,"enfr":1,"enhu":1,"enit":1,"enlt":1,"enlv":1,"enmk":1,"ennl":1,"enno":1,"enpt":1,"enru":1,"ensk":1,"ensl":1,"ensq":1,"ensv":1,"entr":1,"enuk":1,"esbe":1,"esde":1,"esen":1,"esru":1,"esuk":1,"eten":1,"etru":1,"fien":1,"firu":1,"frbe":1,"frde":1,"fren":1,"frru":1,"fruk":1,"hrru":1,"huen":1,"huru":1,"hyru":1,"itbe":1,"itde":1,"iten":1,"itru":1,"ituk":1,"lten":1,"ltru":1,"lven":1,"lvru":1,"mken":1,"mkru":1,"nlen":1,"nlru":1,"noen":1,"noru":1,"plbe":1,"plru":1,"pluk":1,"pten":1,"ptru":1,"robe":1,"roru":1,"rouk":1,"ruaz":1,"rube":1,"rubg":1,"ruca":1,"rucs":1,"ruda":1,"rude":1,"ruel":1,"ruen":1,"rues":1,"ruet":1,"rufi":1,"rufr":1,"ruhr":1,"ruhu":1,"ruhy":1,"ruit":1,"rult":1,"rulv":1,"rumk":1,"runl":1,"runo":1,"rupl":1,"rupt":1,"ruro":1,"rusk":1,"rusl":1,"rusq":1,"rusr":1,"rusv":1,"rutr":1,"ruuk":1,"sken":1,"skru":1,"slen":1,"slru":1,"sqen":1,"sqru":1,"srbe":1,"srru":1,"sruk":1,"sven":1,"svru":1,"trbe":1,"trde":1,"tren":1,"trru":1,"truk":1,"ukbg":1,"ukcs":1,"ukde":1,"uken":1,"ukes":1,"ukfr":1,"ukit":1,"ukpl":1,"ukro":1,"ukru":1,"uksr":1,"uk-tr":1};

    if (taptav.type == 'baidu') {
	taptav.languagePairs = taptav.baiduLanguagePairs;	    
    } else if (taptav.type == 'yandex') {
	taptav.languagePairs = taptav.yandexLanguagePairs;	    
    } else {
	taptav.languagePairs = taptav.wipoLanguagePairs;
    }
    return;
}
var noconsole={};
noconsole.log=function(e) { 
    $('#taptaLogs').val($('#taptaLogs').val()+"\n"+e);
}

var ua=navigator.userAgent;
var isIe = (ua.indexOf("msie") == 0 || ua.match(/mozilla.*?(MSIE)/i) || ua.match(/trident\/.*; rv:(\d+)/i));


var taptav = {
    type:"wipo", 
    taptaTitle:"Wipo Translate", 
    transURL: "simpleTxtTranslate.jsp",
    taptakeyUrlJson:"taptawidget/getTaptakeyJson.jsp",
    taptakeyUrlJsonp:"taptawidget/getTaptakeyJsonp.jsp",
    myLangpair:"enfr", 
    myDomain:"XXXX", 
    defaultContext:"guess",
    currentLang:"", 
    

    myTaptaUrl:"none",
    
    
 
      myWipoUrl:"https://patentscope.wipo.int/translate",
    taptaToTranslateId:0, 
    stillToTranslate:{},
    mtMenu:0, 
    myParent_class:"body", 
    countTranslated:0, 
    countRequestSubmitted:0, 
    countRequestTranslated:0, 
    countRequestInError:0,    

    countSpanToTranslate:0,  
    countSpanTranslated:0,   
    

    defaultTimeOut:20000, 
    languagePairs:'',
    errorDisplayed:false,

    lbContinueTranslate:"[Continue translation]",

    initialized:0,   
    MaxTranslations:5, 
    myTaptaKey:"none",
    myContext:"",

    stop:false,

    myNodes:'',
    ataptaAnchor:0,

    maxLengthTxt:500,
    taptaProgressBar:'',
    progressLabel:'',
    documentTranslatedSegments:0,
    alreadyClicked:0,
    taptaseg:0,
    xhrFields:null,
    alertManyTranslationWipo:"Apparently too many requests are received by WIPO Translate server. Therefore the server cannot give answers to all the resquests on time. We are working on expending the capacity. We suggest to try the service later. Sorry for the inconvenience.",
    
    submitBuffer: [],
    maxConcurrentAjaxCalls: 5, 
    currentCallsCount: 0

};


$().ready(function() {
   noconsole.log("initialized="+taptav.initialized);
    if (taptav.initialized != 0) {return;}
    taptav.initialized=1;

    if (taptav.myTaptaUrl == "none") {
	
	taptav.myTaptaUrl=$('#taptaWidgetUrl').attr('src');
	taptav.myTaptaUrl=taptav.myTaptaUrl.replace (/\/(test\/)?taptawidget\/[a-z\.\-]+\.js/,"/translate");
	
	
    }
    
    $('.taptaOrigButton').click(function(e) {callTaptaQuickTranslate($('.taptaOrig').text());});


taptav.href=$('script[src$="taptawj.js"],script[src$="taptaWidget.js"],script[src$="taptaLb.js"]').attr('src');
taptav.basehref=taptav.href.replace(/\/((test\/)?taptawidget\/|scripts\/)?(?:[a-z]+-)?tapta([a-zA-Z]+).js$/gi,"");
taptav.wipoImgIcon="<img src=\""+taptav.basehref+"/images/WipoIcon.png\" width=\"16\" height=\"16\" border=\"0\"/>";
taptav.imgIcon=taptav.wipoImgIcon;
taptav.baiduImgIcon="<img src=\""+taptav.basehref+"/images/BaiduIcon.png\" width=\"16\" height=\"16\" border=\"0\"/>";

taptav.googleImgIcon="<img src=\""+taptav.basehref+"/images/GoogleIcon.png\" width=\"16\" height=\"16\" border=\"0\"/>";
taptav.bingImgIcon="<img src=\""+taptav.basehref+"/images/BingIcon.png\" width=\"16\" height=\"16\" border=\"0\"/>";
taptav.imgWaitIcon="<img src=\""+taptav.basehref+"/images/clirimages/ajax-load.gif\" />";
    var myCheckInViewType=typeof(checkInView);




 
  
  
	


taptav.taptaButtonStyles={
    "background-color":  "rgb(234,240,248)",





    "border-width": "1px",
    "border-style": "solid",
    "border-color": "rgb(154, 175, 229)",
    "border-radius": "5px",

    "color": "black",
    "display": "inline-block",
    "font-size": "12px",
    "font-weight": "bold",
    "margin-bottom": "5px",
    "margin-left": "0",
    "margin-top": "0",
    "padding": "3px 10px 4px",
    "text-align": "center",
    "text-decoration": "none",
    "white-space": "nowrap",
    "cursor":"pointer"
};
taptav.mtMenuContainerStyle = {
    
    













};
taptav.mtMenuContainerStyle_old = {
    
    "border-width": "1px",
    "border-style": "solid",
    "border-color": "red",
    "border-radius": "1px",

    "background-color":  "light-yellow"


};
taptav.mtMenuContainerStyleOn = {
    "background-color":  "white",
    "display":"inline",
    "position":"absolute",
    "top":"170px",

    "border-width": "1px",
    "border-style": "solid",
    "border-color": "red",



    "z-index":"9999998", 
    "cursor":"pointer"

    };


taptav.menuTranslate = "<span class=\"taptaMenuMt notranslate\">"+
"<img src=\""+taptav.basehref+"/images/translation16x16.png\" width=\"16\" height=\"16\" border=\"0\"/>"
+"Machine translation</span><span class=\"taptaHiddenMenu notranslate\">&nbsp;</span><br/>"+


"<div class=\"taptaPopMenu notranslate\"><span class='notranslate'>"+

"<a class=\"taptaClick notranslate\">tapta</a>"+

"<a class=\"googleClick notranslate\">Google</a>"+
"<a class=\"bingClick notranslate\">Microsoft-bing</a>"+
"<a class=\"baiduClick notranslate\">baidu</a>"+
    "    </span></div><span class=\"taptaMtNew notranslate\"/>"
;

    


    taptav.options={debug:0, notranslate:0, onlyprepare:0, verbose:0, notranslateonscroll:0,compare:0,transliteration:1};

    taptav.menuOptions = "<span class=\"taptaMenuOptions\">Tapta V"+VERSION+"<table border=\"1\">";
    for (var key in taptav.options) {
	taptav.menuOptions += "<tr><td><input name=\""+key+"\" type=\"checkbox\">"+key+"</input></td></tr>";
    }
    taptav.menuOptions += "</table></span>";


taptav.cssTaptaMenu = {
    "margin-top":"5px",
    "padding":" 5px 10px",
    "font-size":" 0.9em",
    "background":"#DADACB",
    "border":" 2px solid #958573",


    "display":"inline",
   "position":"absolute",





    "cursor":"pointer"
};

taptav.baiduLgCode = function (lg) 
	      {
		  switch(lg) {
		  case 'ja': return 'jp';
		  case 'es': return 'spa';
		  case 'ye': return 'yue';
		  case 'zh-yue': return 'yue';
		  case 'ko': return 'kor';
		  case 'fr': return 'fra';
		  case 'ar': return 'ara';
		  case 'fr': return 'fra';
		  case 'zh-TW': return 'wyw';
		  case 'tw': return 'wyw';
		  default:
		      return lg;
		  }
};

taptav.setAccessToHiddenMenu = function () {
    
    $('.taptaHiddenMenu').click(function() {
	$('.taptaHiddenMenu').replaceWith(taptav.menuOptions);
	$('.taptaMenuOptions input').change(function() {
	    for (var key in taptav.options) { taptav.options[key]=0;}
	   noconsole.log("changed");
	    $('.taptaMenuOptions input:checked').each(function() {
		taptav.options[$(this).attr('name')] = 1;
	noconsole.log("Checked: "+$(this).attr('name')+" ="+taptav.options[$(this).attr('name')]);
		
	    });
	});
    });
};



taptav.mySelect = function () {
	var text = '';
	
	if (window.getSelection) {
	    text = window.getSelection();
	    
	} else if (document.getSelection) {
	    text = document.getSelection();
	    
	} else if (document.selection) {
	    text = document.selection.createRange().text;
	}
	
	text = text.toString();
	return text;
}
taptav.estimateSize = function (){
   var stats={};
   var t="";    
    var txt= ""+taptav.$parentClass.not('.notranslate,script').contents().text();
    txt=txt.replace(/<\!\-\-[^>]*\-\->/g,"");
    txt=txt.replace(/[ \t\n\r]+/gm," ");
    txt=txt.replace(/[ \t\n\r]+/gm," ");

   noconsole.log("Size:"+txt.length);
    stats.size = txt.length;
    return stats;
};

taptav.getSelected = function(){
  var t = '';
try {
  if(window.getSelection){
    t = window.getSelection();
  }else if(document.getSelection){
    t = document.getSelection();
  }else if(document.selection){
    t = document.selection.createRange().text;
  }
    if (t=='') {
	t= window.getSelection().anchorNode.textContent.substring(
	    window.getSelection().extentOffset, 
	    window.getSelection().anchorOffset);
    }
} catch (e) {};

  return t;
}	
taptav.mouseUp = function(){
/*
    var myString = taptav.getSelected();
    if (myString != '') {

	callTaptaQuickTranslate(myString, $('.taptaOrig').attr('langpair'));
    }
*/
};
	
taptav.removePreviousTaptaLink = function() {
    if (taptav.mtMenu) {return;}
$('input[src$="translation16x16.png"],#taptaClick,#baiduClick,#bingClick,#googleClick,.taptaClick,.baiduClick,.bingClick,.googleClick').remove();
}


taptav.chgMtMenuContainer = function () {
    var p = $( ".mtMenuContainer" );
    var position = p.position();
    if (position.top > 50) {
	taptav.mtMenuContainerStyleOn.top = (position.top-50)+"px";
    }
    taptav.mtMenuContainerStyleOn.left = ($(window).width() - 210)+"px";
   noconsole.log("top="+taptav.mtMenuContainerStyleOn.top);
    $('.mtMenuContainer').css(taptav.mtMenuContainerStyleOn);
}

taptav.hideTaptaMenu = function () {

	if ($('.hideTaptaMenu').length <=0) {
		try {
			var translatedBy="Wipo Translate";
			if (taptav.type != 'tapta') {
				translatedBy=taptav.type;	    
			}
			$("<span class=\"notranslate\" style=\"color:black\">Translated by "+translatedBy+"</span><br/>").prependTo('.taptaMtNew');
			$('<div id="hideTaptaMenuClose" class="notranslate hideTaptaMenu" title="Hide translation / back to original" style=\"text-align:right\"><img src="'+taptav.basehref+'/images/icons/close.png" /></div>').prependTo('.taptaMtNew');
			if (taptav.type == 'baidu' || taptav.type == 'tapta') {
				$('<div id="hideTaptaMenu" class="notranslate hideTaptaMenu" title="Hide translation / back to original"><img src="'+taptav.basehref+'/images/notranslation16x16.png" />Back to original</div><span class="taptaHiddenMenu">.</span>').appendTo('.taptaMtNew');

			}

			$('#hideTaptaMenu').css(taptav.taptaButtonStyles);
			$('.hideTaptaMenu').click(function () {location.reload()});

			$('.taptaPopMenu').fadeOut("fast", "linear");
			$('.taptaMenuMt').fadeOut("fast", "linear");
			$('.mtMenu').fadeOut("fast", "linear");
			taptav.setAccessToHiddenMenu();

		}catch(e){};
	}
};


    if ($('span.taptaHiddenMenu[taptaType="biblio"]').length) {
	

	$('a[href*="simpleTranslate"]').toggle(); 
    }
    
    if ($('#detailMainForm\\:Drawings\\:content').length ||
	$('#detailMainForm\\:NatCollDocuments\\:content').length) {
	$('.mtMenu').toggle();
    }

    getLanguagePairs();


    if ($('.mtMenu').length) {
	taptav.mtMenu=1;
noconsole.log("Menu exists");
    } else {
	
    }
    var t= $('a[id$="showTransTool4"],a[id$="hideTransTool4"],#taptaHiddenMenu[taptaType="resultList"],.taptaHiddenMenu[taptaType="resultList"]');
    if ( t.length ) {
	
	taptav.removePreviousTaptaLink();
	try {
	    taptav.context=$('textarea[id$="refineSearchTop"]').text();
	    taptav.context="rl:"+taptav.context;
	    if (taptav.context == null || taptav.context.length <= 0) {
		
	    }
	} catch (e) {taptav.context='resultlist';}
	
	if ( $( ".trans-result-list-row" ).length ) {
		taptav.myParent_class='.trans-result-list-row';
	} else {
		
		taptav.myParent_class='tbody#resultTable\\:tb';
	}
	taptav.myLangpair='xxen';
	if (taptav.mtMenu) {t.remove();}
	else {t.replaceWith(taptav.menuTranslate);}
    } else {
	
	t=$('.ncDetailText,.taptaHiddenMenu[taptaType="biblio"]');
    
	if ( t.length ) {
		
		
		

	    t=$('.ncDetailText,.ncDetailLabel,trans-nc-detail-label,trans-nc-detail-label,#detailPCTtableWO,.PCTtitle,.PCTabstract').first();
	    
	    taptav.removePreviousTaptaLink();
	    
	    taptav.context=null;
	    try {
		taptav.context=$('meta[name="DC.identifier"]').attr("content");
		if (taptav.context == null) { 
		    taptav.context =$('#resultPanel1').text().replace(/.*\(([^\)]+).*/g,"$1");
		}
		if (taptav.context == null || taptav.context == "" ) { 
			taptav.context =$('meta[name="applicationId"]').attr("content");
		    }
	    } catch(err) {}
	    if (taptav.context==null) {
		taptav.context='biblio';
	    } else {
		taptav.context='bi:'+taptav.context;
	    }
	    taptav.myParent_class='.PCTtitle,.PCTabstract,.NPtitle,.NPabstract';
	    taptav.myLangpair='xxen';
	   noconsole.log("context is: "+taptav.context);
	    if (! taptav.mtMenu) {
	      var topTable=$('div[id$="iblio:content"]>table>tbody>tr.alignTop>td:not(.bptapta1)');
	      if (topTable.length) { 
	noconsole.log("append menu to "+topTable);
		topTable.first().parent().append("<td class=\"bptapta1\" align=right>"+taptav.menuTranslate+"</td>");
	      } else { 
		t.replaceWith(taptav.menuTranslate);
	      }
            }
	} else {
	    t= $('.ncDetailLabel,#detailPCTtableWO');
	    if ( t.length ) {
		t=$('.ncDetailLabel,#detailPCTtableWO').first();
		
		taptav.removePreviousTaptaLink();
		$('input[src$="translation16x16.png"]').remove();

		taptav.context=null;
		try {
		    taptav.context=$('meta[name="DC.identifier"]').attr("content");
		    if (taptav.context == null) { 
			taptav.context =$('#resultPanel1').text().replace(/.*\(([^\)]+).*/g,"$1");
		    }
		} catch(err) {}
		if (taptav.context==null) {
		    taptav.context='biblio';
		} else {
		    taptav.context='bi:'+taptav.context;
		}

		taptav.myParent_class='.trans-section';
		taptav.myLangpair='xxen';
	noconsole.log("context is: "+taptav.context);
		var topTable=$('div[id$="iblio:content"]>table>tbody>tr.alignTop>td:not(.bptapta1)');
		if (topTable.length) { 
		   noconsole.log("append menu to "+topTable);
		    topTable.first().parent().append("<td class=\"bptapta1\" align=right>"+taptav.menuTranslate+"</td>");
		} else {
		    if (taptav.mtMenu) {t.remove();}
		    else {t.replaceWith(taptav.menuTranslate);}
		}
	    } else {
		
		t= $('a[id$="linkMtDesc"],a[id$="linkAltmtDesc"],a[id$="linkMtFT"],.taptaHiddenMenu[taptaType="description"],.taptaHiddenMenu[taptaType="fullText"]');
		try {
		    taptav.myLangpair=$('.taptaClick').attr('onclick').replace(/.*,\'([a-z][a-z][a-z][a-z])\',.*/g,"$1");
		} catch (err) {
		    taptav.myLangpair =guessLanguageFromPage();
		}
		if ( t.length ) {
		    taptav.removePreviousTaptaLink();
		   
		   
		   
		    taptav.myParent_class="span.searchhit,div#contentWrapper,table[width=520],table[width=800]";

		    taptav.context=$('meta[name="DC.identifier"]').attr("content");
		    if (taptav.context == null) { 
			taptav.context = $('#resultPanel1').text().replace(/.*\(([^\)]+).*/g,"$1");
		    }
		    taptav.context+="d";
		    if (taptav.mtMenu) {t.remove();}
		    else {t.replaceWith(taptav.menuTranslate);}

		} else {
		    
		    
		    t= $('a[id$="linkMtClaims"], a[id$="linkAltmtClaims"],.taptaHiddenMenu[taptaType="claims"]');
		    if ( t.length ) {
			taptav.removePreviousTaptaLink();
			taptav.myParent_class='span.searchhit';
			try {
			    taptav.context=$('meta[name="DC.identifier"]').attr("content");
			    if (taptav.context == null) { 
				taptav.context =$('#resultPanel1').text().replace(/.*\(([^\)]+).*/g,"$1");
			    }
			} catch(err) {
			    try {
				taptav.context = $('#resultPanel1').text().replace(/.*\(([^\)]+).*/g,"$1");
			    } catch (err2) {
				taptav.context='null';
			    }
			}
			taptav.context+="c";
			if (taptav.mtMenu) {t.remove();}
			else {t.replaceWith(taptav.menuTranslate);}
		    }
		}
	    }
	}
    }
    
   noconsole.log("context after:"+taptav.context);

    
    $('.mtMenuContainer').css(taptav.mtMenuContainerStyle);
	      $('.mtMenu').css("z-index","9");
	      

	      taptav.taptaTitle += ' [powered by <a href="https://marian-nmt.github.io/" style="vertical-align: top" target="_blank">Marian</a>]';
	      
	    	  

    taptav.setAccessToHiddenMenu();
   
    if (! taptav.mtMenu) {
	$('.taptaPopMenu').fadeOut("fast", "linear");
    
	$( ".taptaPopMenu").css(taptav.cssTaptaMenu);
	$( ".taptaMenuMt" ).mouseover(function() {
            $('.taptaPopMenu').fadeIn("fast", "linear");
	});

	$('.taptaPopMenu').mouseleave(function() {
	    setTimeout(function() { 
		$('.taptaPopMenu').fadeOut("fast", "linear");
	    }, 2000);

	
	});
	$( ".menuTranslate" )
	    .change(function () {
		var str = $( "select.menuTranslate option:selected" ).val();
		if (str == 'baidu') {
		    baiduTranslate(taptav.myParent_class,taptav.myLangpair,taptav.context,'http://api.fanyi.baidu.com/api/trans/vip/translate');
		    
		} else if (str == 'tapta') {
			if ($(location).attr('hostname') == 'localhost' ||
			    $(location).attr('href').indexOf('file:') == 0) { 
			noconsole.log("call with"+taptav.myParent_class+taptav.myLangpair+taptav.context+'http://localhost:8080/Wtapta');
				
				taptaTranslate(taptav.myParent_class,taptav.myLangpair,taptav.context,'http://localhost:8080/Wtapta');
			} else if ($(location).attr('hostname').indexOf('smt1')==0) {
				taptav.myWipoUrl="http://smt1.wipo.int:8080/Wtapta";
				taptaTranslate(taptav.myParent_class,taptav.myLangpair,taptav.context,'http://smt1.wipo.int:8080/Wtapta');
			}
		} else {
		    alert('Don t know choice:'+str+' host: '+$(location).attr('hostname') );
		}
      
	    });
    }
    if ($(location).attr('hostname').indexOf('smt1')==0) {
	taptav.myWipoUrl="http://smt1.wipo.int:8080/Wtapta";
    }

    if ($('.baiduClick').length) { 
	if (! taptav.mtMenu) {
	    $('.baiduClick').html( taptav.baiduImgIcon+"Baidu Translate" );
	    $('.baiduClick').css( taptav.taptaButtonStyles );
	    $(getLanguagePairsSelect('baidu')).appendTo('.baiduClick');
	}
   noconsole.log("BAIDUCLICK");



	$( ".baiduClick div[class*='baiduClick\\-']" ).click(
	    function() {
	noconsole.log("I clicked on "+$(this).attr('class')+" :"+$(this).html());
		var str=$(this).attr('class'); str=str.replace(/.*Click\-([a-z][a-z]).*/,"$1");
		if (taptav.lLangpair == null || taptav.lLangpair <= 0) {
                    taptav.lLangpair = guessLanguageFromPage();
                }
                taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
                taptav.myLangpair=taptav.lLangpair;
               noconsole.log("New class="+$(this).attr('class')+" dstLang="+str+" lp="+taptav.lLangpair+" context="+taptav.myParent_class+" engine="+taptav.type);
		
                $(".baiduClick:not([class*='baiduClick\\-'])").click();
                                         });
	$(".baiduClick:not([class*='baiduClick\\-'])").click(
			function() {
				if (taptav.type != 'baidu') {
					taptav.type = 'baidu';
					taptav.chgMtMenuContainer();
					taptav.hideTaptaMenu();
				noconsole.log("Baidu click here lp="+taptav.myLangpair);
					baiduTranslate(taptav.myParent_class,taptav.myLangpair,taptav.context,'http://api.fanyi.baidu.com/api/trans/vip/translate');
				}
			});
	
	$( ".taptaSelectLanguage_baidu" )
	    .change(function () {
			var str = $( "select.taptaSelectLanguage_baidu option:selected" ).val();
			taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
			taptav.myLangpair=taptav.lLangpair;
		noconsole.log("New lp="+taptav.lLangpair);
			$('.baiduClick').click();
		    });
	
	
    }
    if ($('.yandexClick').length) { 
	$(document).on("mouseup", taptav.mouseUp);
	if (! taptav.mtMenu) {
	    $('.yandexClick').html( taptav.yandexImgIcon+"Yandex Translate" );
	    $('.yandexClick').css( taptav.taptaButtonStyles );
	}
    }
    if ($('.googleClick').length) { 
	if (! taptav.mtMenu) {
	    $('.googleClick').html( taptav.googleImgIcon+"Google Translate" );
	    $('.googleClick').css( taptav.taptaButtonStyles );
	}
	
	$(".googleClick[class*='googleClick\\-']").click (
	    function() {
	noconsole.log("I clicked on "+$(this).attr('class')+" :"+$(this).html());
		
		var str=$(this).attr('class'); str=str.replace(/.*Click\-([a-z][a-z]).*/,"$1");

		if (taptav.lLangpair == null || taptav.lLangpair <= 0) {
		    taptav.lLangpair = guessLanguageFromPage();
		}
		taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
		taptav.myLangpair=taptav.lLangpair;


		    taptav.type = 'google';
		    taptav.myContext = taptav.context;
		   noconsole.log("Google lp="+taptav.lLangpair+" str="+str+" context="+taptav.context);
		    setTimeout (
			function() {
			    var googleLg=$('.goog-te-combo option:selected' ).val();
			    if (googleLg.length > 0) {
				taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
				taptav.myLangpair=taptav.lLangpair;
			    }
			    getTaptaKey(0);	    
			},5000);
		
			

		    $('<div>').appendTo('.taptaMtNew')
			.attr('id','google_translate_element');

		    $("<script>function googleSectionalElementInit() {"+

		      "  new google.translate.TranslateElement({pageLanguage:'de',relate:\'"+str+"',autoDisplay: false,showGadgets:true,multilanguagePage:true},'google_translate_element');}"+
		      "<\/script>").appendTo('#google_translate_element');
		    $("<style type='text/css'>"+
		      " span.trans-control1 { opacity:0; font-size:1px;}"+
		      " .trans-control {font-size:10px;color:red;}"+
		      " .goog-te-sectional-gadget-link-text {font-size:10px;color:red;}"+
		      " a.goog-te-gadget-link {color:inherit;opacity:inherit;}"+
		      "<\/style>").appendTo('.taptaMtNew');
		    
		    $('<link>')
			.appendTo('head')
			.attr({type : 'text/css', rel : 'stylesheet'})
			.attr('href', 'https://translate.googleapis.com/translate_static/css/sectionalelement.css');
		    
		    $('<script>')
			.appendTo('head')
			.attr({type : 'text/javascript', charset:'UTF-8'})
			.attr('href', '//translate.google.com/translate_a/element.js?cb=googleSectionalElementInit&amp;ug=section&amp;hl=en');
		    $.getScript("https://translate.google.com/translate_a/element.js?cb=googleSectionalElementInit&amp;ug=section&amp;hl=en");
		    $.getScript("https://translate.googleapis.com/translate_static/js/element/main_se.js");

		setTimeout(function() { 
			      noconsole.log("activate google with lang="+str+";");


$('select.goog-te-combo').trigger('mousein');

$('select.goog-te-combo').trigger('click');
$('select.goog-te-combo').trigger('mousedown');
$('select.goog-te-combo').trigger('mousedown');
$('select.goog-te-combo').trigger('mousedown');
$('select.goog-te-combo').val(str).attr("selected","selected");
alert('ok');
$('select.goog-te-combo').trigger('mouseout');











  



  


			       }, 3000);
		

            });
	
	$(".googleClick:not([class*='googleClick\\-'])").click(
	    
        function() {
	    taptav.lLangpair = guessLanguageFromPage();
	    if (taptav.type != 'google') {
		taptav.type = 'google';
		taptav.chgMtMenuContainer();

		taptav.myContext = taptav.context;
	noconsole.log("delay Google lp="+taptav.lLangpair+" context="+taptav.context);
		setTimeout (
		    function() {
			try {
			    var googleLg=$('.goog-te-combo option:selected' ).val();
			    if (googleLg != null && googleLg.length > 0) {
				taptav.lLangpair=taptav.lLangpair.substring(0,2)+googleLg;
				taptav.myLangpair=taptav.lLangpair;
			    }
			   noconsole.log("Google ("+googleLg+") lp="+taptav.lLangpair+" context="+taptav.context);
			} catch (x) {			    
			}
			getTaptaKey(0);	    
		    },5000);
		

		$(document).on("mouseup", taptav.mouseUp);
		$('<div>').appendTo('.taptaMtNew')
		    .attr('id','google_translate_element');
		$("<script>function googleSectionalElementInit() {"+
"  new google.translate.TranslateElement({pageLanguage:'',multilanguagePage:true},'google_translate_element');}"+
		  "<\/script>").appendTo('#google_translate_element');
		$("<style type='text/css'>"+
" span.trans-control1 { opacity:0; font-size:1px;}"+
" .trans-control {font-size:10px;color:red;}"+
" .goog-te-sectional-gadget-link-text {font-size:10px;color:red;}"+
" a.goog-te-gadget-link {color:inherit;opacity:inherit;}"+
"<\/style>").appendTo('.taptaMtNew');
		
		$('<link>')
		    .appendTo('head')
		    .attr({type : 'text/css', rel : 'stylesheet'})
		    .attr('href', 'https://translate.googleapis.com/translate_static/css/sectionalelement.css');
		
		$('<script>')
		    .appendTo('head')
		    .attr({type : 'text/javascript', charset:'UTF-8'})
		    .attr('href', '//translate.google.com/translate_a/element.js?cb=googleSectionalElementInit&amp;ug=section&amp;hl=en');
		$.getScript("https://translate.google.com/translate_a/element.js?cb=googleSectionalElementInit&amp;ug=section&amp;hl=en");
		$.getScript("https://translate.googleapis.com/translate_static/js/element/main_se.js");

		
		taptav.hideTaptaMenu();
		if (taptav.wipoLanguagePairs[taptav.lLangpair]) {
		    if (taptav.options.compare) {
			setTimeout(
			    function() 
			    { 
				
			  noconsole.log("---activate "+$('.started-activity-container').length+":"+$('.started-activity-container').html());
				$("<span class=\"taptaAfterGoogle\"/>").appendTo('.activity-links');
				$('.taptaAfterGoogle').html("<hr/><br/><span class=\"taptaOrigButton\">"+(taptav.type=='tapta'?'':'Compare with:')+taptav.wipoImgIcon+"Wipo Translate</span><br/><hr/>");

				   
				$('.taptaOrigButton').css(taptav.taptaButtonStyles);
				       
				$('.taptaOrigButton').click(
				    function (e) 
				    {
					var t=$('.original-text').text();
					
					$('#taptaAdds').html("");
					
					callTaptaQuickTranslate(t);
					
					
				    });   
				       
			    }, 3000);	
		    }
		}
	    } 
	}); 
    }

			       			       
    if ($('.bingClick').length) { 
	if (! taptav.mtMenu) {
	    $('.bingClick').html( taptav.bingImgIcon+"Ms-Bing Translate" );

	    $('.bingClick').css( taptav.taptaButtonStyles );
	}
	$('.bingClick').click(function () {
	    if (taptav.type != 'bing') {
		taptav.type = 'bing';
		taptav.chgMtMenuContainer();



		taptav.myContext = taptav.context;
	noconsole.log("bing lp="+taptav.lLangpair+" context="+taptav.context);
		
		setTimeout (
		    function() {
			var ld = $('script[src*="microsofttranslator.com/sync"]');
			
			ld=ld.attr('src');
			if (ld != null) {
			    ld=ld.replace(/.*to=([a-z][a-z]).*/,"$1");
			
			    if (ld.length > 0) {
				taptav.lLangpair=taptav.lLangpair.substring(0,2)+ld;
				taptav.myLangpair=taptav.lLangpair;
			    }			    
			}
		noconsole.log("Bing ("+ld+") lp="+taptav.lLangpair+" context="+taptav.context);

			getTaptaKey(0);	    
		    },5000);

		var ls=taptav.myLangpair.substring(0,2);
		if (ls == 'xx') { 
		    ls=guessLanguageFromPage().substring(0,2);
		}
		
		$("<div id='MicrosoftTranslatorWidget' class='Dark' style='color:white;background-color:#555555'><\/div>").appendTo('.taptaMtNew');


		setTimeout(function(){{var s=document.createElement('script');s.type='text/javascript';s.charset='UTF-8';s.src=((location && location.href && location.href.indexOf('https') == 0)?'https://ssl.microsofttranslator.com':'http://www.microsofttranslator.com')+'/ajax/v3/WidgetV3.ashx?siteData=ueOIGRSKkd965FeEGM5JtQ**&ctf=True&ui=true&settings=Manual&from=';var p=document.getElementsByTagName('head')[0]||document.documentElement;p.insertBefore(s,p.firstChild); }},0);
		
	noconsole.log( "Bing translate: okls=''"+ls+"''");
		taptav.hideTaptaMenu();
		taptav.lLangpair= guessLanguageFromPage();
	noconsole.log("try 1 Bing"+taptav.lLangpair+" "+taptav.languagePairs+"="+taptav.languagePairs[taptav.lLangpair]);
		if (taptav.options.compare) {
		    taptav.msWaitBing=4000;
		    if (taptav.wipoLanguagePairs[taptav.lLangpair]) {
		noconsole.log("---try activate tapta-Bing");
			setTimeout(
			    launchCompareToBing
			    , taptav.msWaitBing);
		    }
		}
	    }
	});
    }
    if (! taptav.mtMenu) {
    	$('.taptaClick').html( "<span class=\"taptaClick1\">"+taptav.imgIcon+"Wipo Translate" +"</span>");
    	$('.taptaClick').css( taptav.taptaButtonStyles );
    	$(getLanguagePairsSelect('wipo')).appendTo('.taptaClick');

    	$('.taptaSelectLanguage_wipo').mouseleave(function() {});
    	$('.taptaClick').mouseleave(function() {}); 
    	$('.taptaClick1').mouseleave(function() {});
    	$('.taptaSelectLanguage_wipo').click(function() {});
	
    }
    


    
	taptav.translateFunction = function() {
		if (taptav.type != 'tapta') {
		    taptav.type = 'tapta';
		}	
		taptav.chgMtMenuContainer();
		var newTaptaUrl=taptav.myTaptaUrl.replace(/([^\/])\/[a-z\.]+$/,"$1"); 
		
		
		 
        if (newTaptaUrl && newTaptaUrl.indexOf("Beta") !== -1) {
           noconsole.log('URL: ' + newTaptaUrl);
            
        } else {
        	
    		
            newTaptaUrl="https://patentscope.wipo.int/translate";
        }

		
		taptaTranslate(taptav.myParent_class,taptav.myLangpair,taptav.context,newTaptaUrl);
		
		
		
		
		
		
 		
	        
	    };
	    
	$('.taptaClick1').click(taptav.translateFunction);




	$( "[class*='taptaClick\\-']" ).click(function() {
	noconsole.log("I clicked on "+$(this).attr('class')+" :"+$(this).html());
		var str=$(this).attr('class'); str=str.replace(/.*Click\-([a-z][a-z]).*/,"$1");
		if (str=='jp' || str=='ja') { 
			str="jp";
		} 
		if (taptav.lLangpair == null || taptav.lLangpair <= 0) {
			taptav.lLangpair = guessLanguageFromPage();
		}
		taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
		
		taptav.myLangpair=taptav.lLangpair;
	noconsole.log("New class="+$(this).attr('class')+" dstLang="+str+" lp="+taptav.lLangpair+" context="+taptav.myParent_class+" engine="+taptav.type);
		taptav.translateFunction();

	});

    
    

	$( ".taptaSelectLanguage_wipo" )
	    .change(function () {
		var str = $( "select.taptaSelectLanguage_wipo option:selected" ).val();
		taptav.lLangpair=taptav.lLangpair.substring(0,2)+str;
		taptav.myLangpair=taptav.lLangpair;
	noconsole.log("New lp="+taptav.lLangpair);
		$('.taptaClick1').click();
	    });
	
   

   noconsole.log("context EOP is: "+taptav.context+" class="+taptav.myParent_class+" engine="+taptav.type);

});


function launchCompareToBing () {
    
		      
    var t=$('div[translate="no"]>div[style^="direction"][id!="WidgetLauncher"]');
    
    if (t != null && t.html() != null && t.html().length > 0) {
	var ld = $('script[src*="microsofttranslator.com/sync"]');

	ld=ld.attr('src');
	ld=ld.replace(/.*to=([a-z][a-z]).*/,"$1");

noconsole.log("---Bing activated lpair="+ld+" "+t.html());

	taptav.lLangpair=taptav.lLangpair.substring(0,2)+ld;

	$("<span class=\"taptaAfterGoogle\"/>").appendTo(t);
	$('.taptaAfterGoogle').html("<hr/><br/><span class=\"taptaOrigButton\">"+(taptav.type=='tapta'?'':'Compare with:')+taptav.wipoImgIcon+"Wipo Translate</span>:"+$(this).closest('div[translate="no"]>div[style^="direction"]>span[style^="display"]').text()+"<br/><hr/>");
	$('.taptaOrigButton')
		.css(taptav.taptaButtonStyles)
		.click(function (e) {
	    
		var $this = $(this)
	   noconsole.log(" lpair="+taptav.lLangpair+"closest="+$this.closest('div[translate="no"]').html()+" closestdir="+$this.closest('div[translate="no"] div[style^="direction"]').html()+" \nclosestdirspan="+$this.closest('div[translate="no"] div[style^="direction"]').find('span[style^="display"]').html());
	    var t=$this.closest('div[translate="no"] div[style^="direction"]').find('span[style^="display"]').text();

	    
	    $('#taptaAdds').html("");
	    
	    callTaptaQuickTranslate(t);
	    
	    
	});
    } else if (taptav.msWaitBing > 30000) { 
noconsole.log("abort bing comparison");
    } else {
noconsole.log("---Bing not activated... retry");
	taptav.msWaitBing+=1000;
	setTimeout(
	    launchCompareToBing
	    , taptav.msWaitBing);
    }
}

function objectToJson(printthis) {
    var output = '';

    if(Array.isArray(printthis) || typeof(printthis) == 'object') {
        for (var i in printthis) {
            output += i + ' : ' + objectToJson(printthis[i]) + '\n';
        }
    } else {
        output += printthis;
    }
    return output;
}

 
  

function guessLanguageFromPage () {
    var ls='xx';
    var ld='en';
    taptav.guesslogs="";

    if (taptav.guessedLanguageFromPage != null) {
	return taptav.guessedLanguageFromPage;
    }
    if ($('.taptaInfo[lg]').length) {
	ls=$('.taptaInfo').attr('lg');
    }
    
    
    
    
    
    if (ld === undefined || ld == null || ld.length <= 0) { 
	try {
	    ld=taptav.$parentClass.find('select[name$="selectedInterfaceLanguage"] option:selected').val();
	} catch (e) {
	}
    }
    if (taptav.context != null && (taptav.context == 'biblio' || taptav.context=='resultlist' || taptav.context.match(/^bi:/) || taptav.context.match(/^rl:/))) {
	return 'xx'+ld;
    }
    if (ls == 'xx') {
	try {
	    
	    var nodes=taptav.$parentClass.find('textarea[name$="refineSearchTop"],.PCTtitle');
	    var l=nodes.html().length;
	    if (nodes != null && nodes.length > 0 && l > 0) {
		
		return 'xx'+ld;
	    }
	} catch (e) {}
	
        
	try {
	    
	} catch (e) {
	    ls='';
	}
	if (ls === undefined || ls == null || ls.length <= 0 || ls == 'xx') { 
	    var t= $(taptav.myParent_class+",table[width=520], table[width=800]").not('.notranslate,script').text().toLowerCase();
	    t=t.replace(/<script.*?<\/script>/g,"").replace(/<[^>]*>/g,"").replace(/[\n\r ]+/g," ");
	    var start=t.length -4000; if (start<0) {start=0;}
	    taptav.guesslogs += " scan "+t.length+" - "+start+" = "+(t.length-start)+"c ''"+t.substring(start)+"''\n";
	    ls=taptav.guessLanguageFromText(t.substring(start));
	
noconsole.log("language guess: "+ls+ld+" "+taptav.guesslogs);
    } else {
	taptav.guesslogs="guessed from html";
    }
    }
   noconsole.log("language guess: "+ls+ld+" "+taptav.guesslogs);
    taptav.guessedLanguageFromPage = ls+ld;
    return ls+ld;
}


taptav.guessLanguageFromText = function (t) {
    var a = t.split("");
    var lCount=[];
    for (var i=0; i<16;i++) {lCount[i]=0;}
    
    
    var lang=['undef', 'ar', 'de', 'es', 'en', 'fr', 'he', 'ja', 'ko', 'nl', 'pt', 'ru', 'zh', 'it', 'sv', 'xx'];
    
    for (var i = 0, len = a.length; i < len; i++) {
	var c=a[i];
	switch (c) {
	case ("ó"):lCount[3]++; break; 
	case ("í"):lCount[3]++; break; 
	case ("á"):lCount[3]++; break; 
	case ("é"):lCount[5]++; lCount[3]+=0.2; break; 
	case ("è"):lCount[5]++; break; 
	case ("ï"):lCount[5]++; break; 
	case ("ç"):lCount[5]++; lCount[10]++; break; 
	case ("â"):lCount[5]++; break; 
	    
	case ('ß'):lCount[2]++; break; 
	case ('ä'):lCount[2]++; break; 
	case ('ü'):lCount[2]++; break; 
	case ('ö'):lCount[2]++; break; 
	    
	case('о'):lCount[11]++; break;// ru203464
	case('и'):lCount[11]++; break;// ru176638
	case('а'):lCount[11]++; break;// ru139910
	case('н'):lCount[11]++; break;// ru137326
	    
	case('ا'):lCount[1]++; break;// ar123924
	case('ي'):lCount[1]++; break;// ar76972
	case('ل'):lCount[1]++; break;// ar76918
	case('و'):lCount[1]++; break;// ar61896
	    
	case('ン') : lCount[7]++; break;//ja
	case('ー') : lCount[7]++; break;//ja
	case('ル') : lCount[7]++; break;//ja
	case('リ') : lCount[7]++; break;//ja
	    
	case('化') : lCount[12]++; break;// zh
	case('发') : lCount[12]++; break;// zh
	case('性') : lCount[12]++; break;// zh
	case('分') : lCount[12]++; break;// zh
	    
	case('이') :lCount[8]++; break;//ko
	case('하') :lCount[8]++; break;//ko
	case('에') :lCount[8]++; break;//ko
	case('로') :lCount[8]++; break;//ko
	    
	case('á'):lCount[10]++; break;// pt
	case('ì'):lCount[10]++; break;// 2058
	default: lCount[0]++;
	}
    }
    var max=0; var l='en'; 
    for (var i = 1; i < lCount.length; i++) {
	if (lCount[i] > 0) {
	    taptav.guesslogs+=" "+lang[i]+":"+lCount[i]+" ";
	    if (lCount[i] > max) {
		max=lCount[i]; 
		l=lang[i];
	    }
	}
    }
    return l;
}

function taptaToTranslateVisibilityChange (e, visible) {

    if (e.text().indexOf(Ccannot)>=0) {postProcessTranslations(); return;}
    var id=e.attr("id");
   noconsole.log("visible", e ," v=",visible," id=",id," t=",e.text().substring(0,10)+" still=",taptav.stillToTranslate);
    if (visible) { 
    	if (! linkToCaptchaDisplayed) {  

    		taptav.stillToTranslate[id]=1;

    		setTimeout(function() { 
    		    if (e.attr('class') == 'taptaToTranslate') {
    				if (taptav.stillToTranslate[id]) {
    				noconsole.log('launch translate of id='+id+":"+e.text());
    					delete taptav.stillToTranslate[id];
    					taptaTranslateThis(e);
    				} else {
    				noconsole.log("Not anymore? id="+id+" t="+e.text().substring(0,10));
    				}
    			} else {
    			noconsole.log("Changed class? id="+id+" t="+e.text().substring(0,10));
    			}


    		}, 2000);
    	}
    } else {
    	delete taptav.stillToTranslate[id];
    }
}

function taptaTranslateThis (e) {
	
	if (taptav.options.notranslateonscroll) {return;}
	if (linkToCaptchaDisplayed) {return;}
	$('.taptaToTranslate').click(function(){}); 
	if (e.hasClass("taptaTranslating")) {return;} 
	e.addClass("taptaTranslating");

	setTimeout(function() {       
		e.css("cursor","initial");
	}, 1000);
	$('.ctapta').remove();
	$('.taptaToTranslate').removeAttr('title');
	$('#taptaAdds').html("<div id=\"taptaAdds\"><i>Translating</i> "+taptav.imgWaitIcon+"</div>");
	translateOneTxtElement(e.html(), e.text(),e.get(0), e.attr('lang'),e.attr('context'));
	
	$('#taptaAdds').html(e.attr('title'));
	
}
